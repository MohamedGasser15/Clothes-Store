@model Clothes_Models.ViewModels.ProductViewModel
@{
    var title = "Create Product";
    var actionText = "Create";
    if (Model.Product?.Product_Id != 0)
    {
        title = "Edit Product";
        actionText = "Update";
    }
}
<!-- Add these in your head section -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />

<!-- Add these before your closing body tag -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    <form method="post" enctype="multipart/form-data" class="bg-white shadow-xl rounded-xl overflow-hidden">
        <input type="hidden" asp-for="Product.Product_Id" />

        <!-- Form Header -->
        <div class="bg-gradient-to-r from-primary to-primary-dark px-6 py-5 border-b border-gray-200">
            <h2 class="text-2xl font-bold text-white">@title</h2>
        </div>

        <!-- Form Content -->
        <div class="p-6 sm:p-8">
            <div asp-validation-summary="ModelOnly" class="mb-4 p-4 bg-red-50 border-l-4 border-red-500 text-red-700">
                <i class="fas fa-exclamation-circle mr-2"></i> Please fix the errors below
            </div>

            <!-- Product Name Field -->
            <div class="mb-6">
                <label asp-for="Product.Product_Name" class="block text-sm font-medium text-gray-700 mb-2">
                    Product Name <span class="text-red-500">*</span>
                </label>
                <div class="relative rounded-lg border-2">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-tag text-gray-400"></i>
                    </div>
                    <input asp-for="Product.Product_Name"
                           class="focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary block w-full pl-10 pr-3 py-3 sm:text-sm border-gray-300 rounded-md transition duration-150 ease-in-out"
                           placeholder="Enter product name">
                </div>
                <span asp-validation-for="Product.Product_Name" class="mt-2 text-sm text-red-600"></span>
            </div>

            <!-- Product Description Field -->
            <div class="mb-6">
                <label asp-for="Product.Product_Description" class="block text-sm font-medium text-gray-700 mb-2">
                    Product Description
                </label>
                <div class="relative rounded-lg border-2">
                    <textarea asp-for="Product.Product_Description" rows="3"
                              class="focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md transition duration-150 ease-in-out"
                              placeholder="Enter product description"></textarea>
                </div>
                <span asp-validation-for="Product.Product_Description" class="mt-2 text-sm text-red-600"></span>
            </div>

            <!-- Price Field -->
            <div class="mb-6">
                <label asp-for="Product.Product_Price" class="block text-sm font-medium text-gray-700 mb-2">
                    Price <span class="text-red-500">*</span>
                </label>
                <div class="relative rounded-lg border-2">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <span class="text-gray-500 sm:text-sm">$</span>
                    </div>
                    <input asp-for="Product.Product_Price" type="number" step="0.01"
                           class="focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary block w-full pl-7 pr-12 py-3 sm:text-sm border-gray-300 rounded-md transition duration-150 ease-in-out"
                           placeholder="0.00">
                </div>
                <span asp-validation-for="Product.Product_Price" class="mt-2 text-sm text-red-600"></span>
            </div>

            <!-- Color Field -->
            <div class="mb-6">
                <label asp-for="Product.Product_Color" class="block text-sm font-medium text-gray-700 mb-2">
                    Color
                </label>
                <div class="relative rounded-lg border-2">
                    <input asp-for="Product.Product_Color"
                           class="focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md transition duration-150 ease-in-out"
                           placeholder="Enter product color">
                </div>
                <span asp-validation-for="Product.Product_Color" class="mt-2 text-sm text-red-600"></span>
            </div>

            <!-- Stock Management Section -->
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Stock Entries (Size and Quantity)
                </label>
                <div id="stockEntries" class="space-y-4">
                    @if (Model.Stocks != null && Model.Stocks.Any())
                    {
                        for (int i = 0; i < Model.Stocks.Count; i++)
                        {
                            <div class="stock-entry grid grid-cols-1 sm:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200">
                                <div>
                                    <select name="Stocks[@i].Size" class="stock-size focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md transition duration-150 ease-in-out" required>
                                        <option value="S" selected="@(Model.Stocks[i].Size == "S")">S</option>
                                        <option value="M" selected="@(Model.Stocks[i].Size == "M")">M</option>
                                        <option value="L" selected="@(Model.Stocks[i].Size == "L")">L</option>
                                        <option value="XL" selected="@(Model.Stocks[i].Size == "XL")">XL</option>
                                        <option value="XXL" selected="@(Model.Stocks[i].Size == "XXL")">XXL</option>
                                        <option value="XXXL" selected="@(Model.Stocks[i].Size == "XXXL")">XXXL</option>
                                    </select>
                                    <span class="size-error mt-2 text-sm text-red-600 hidden">Please select a size</span>
                                </div>
                                <div>
                                    <input type="number" name="Stocks[@i].Quantity" value="@Model.Stocks[i].Quantity"
                                           class="stock-quantity focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md transition duration-150 ease-in-out"
                                           placeholder="Quantity" min="0" required />
                                    <span class="quantity-error mt-2 text-sm text-red-600 hidden">Quantity must be non-negative</span>
                                </div>
                                <div class="flex items-center">
                                    <button type="button" class="remove-stock inline-flex items-center px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-200 transform hover:scale-105">
                                        <i class="fas fa-trash-alt mr-2"></i> Remove
                                    </button>
                                </div>
                            </div>
                        }
                    }
                </div>
                <button type="button" id="addStock" class="mt-4 inline-flex items-center px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-all duration-200">
                    <i class="fas fa-plus mr-2"></i> Add Stock Entry
                </button>
            </div>

            <!-- Image Upload Field with Cropping -->
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Product Image <span class="text-red-500">*</span>
                </label>
                <div class="mt-1 flex flex-col items-start">
                    <!-- Image Preview Container -->
                    <div id="imagePreviewContainer" class="mb-4 relative" style="display: none;">
                        <img id="imagePreview" src="#" alt="Preview" class="max-w-full max-h-64">
                        <div id="cropperControls" class="mt-2 space-x-2 hidden">
                            <button type="button" id="cropImage" class="px-3 py-1 bg-primary text-white rounded hover:bg-primary-dark">
                                <i class="fas fa-crop mr-1"></i> Crop
                            </button>
                            <button type="button" id="cancelCrop" class="px-3 py-1 bg-gray-500 text-white rounded hover:bg-gray-600">
                                <i class="fas fa-times mr-1"></i> Cancel
                            </button>
                        </div>
                    </div>

                    <!-- Current Image or Placeholder -->
                    <div id="currentImageContainer" class="flex items-center">
                        @if (Model.Product?.imgUrl != null)
                        {
                            <img id="productImage" src="@Model.Product.imgUrl" alt="Product image" class="h-16 w-16 object-cover rounded-md mr-4">
                        }
                        else
                        {
                            <div class="h-16 w-16 bg-gray-200 rounded-md flex items-center justify-center text-gray-500 mr-4">
                                <i class="fas fa-image text-xl"></i>
                            </div>
                        }

                        <!-- Hidden elements for cropped result -->
                        <canvas id="croppedResult" style="display: none;"></canvas>
                        <input type="hidden" id="croppedImageData" name="croppedImageData">

                        <!-- File Input -->
                        <div class="flex-1">
                            <input type="file" name="file" id="fileInput" accept="image/*"
                                   class="block w-full text-sm text-gray-500
                                          file:mr-4 file:py-2 file:px-4
                                          file:rounded-md file:border-0
                                          file:text-sm file:font-semibold
                                          file:bg-primary file:text-white
                                          hover:file:bg-primary-dark">
                            <span asp-validation-for="Product.imgUrl" class="mt-2 text-sm text-red-600"></span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Brand and Category Select Fields -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8">
                <div>
                    <label asp-for="Product.brand_Id" class="block text-sm font-medium text-gray-700 mb-2">
                        Brand <span class="text-red-500">*</span>
                    </label>
                    <div class="relative rounded-lg border-2">
                        <select asp-for="Product.brand_Id" asp-items="@Model.BrandList"
                                class="focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary block w-full pl-3 pr-10 py-2 sm:text-sm border-gray-300 rounded-md transition duration-150 ease-in-out">
                            <option value="" disabled selected>-- Select Brand --</option>
                        </select>
                    </div>
                    <span asp-validation-for="Product.brand_Id" class="mt-2 text-sm text-red-600"></span>
                </div>
                <div>
                    <label asp-for="Product.Category_Id" class="block text-sm font-medium text-gray-700 mb-2">
                        Category <span class="text-red-500">*</span>
                    </label>
                    <div class="relative rounded-lg border-2">
                        <select asp-for="Product.Category_Id" asp-items="@Model.CategoryList"
                                class="focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary block w-full pl-3 pr-10 py-2 sm:text-sm border-gray-300 rounded-md transition duration-150 ease-in-out">
                            <option value="" disabled selected>-- Select Category --</option>
                        </select>
                    </div>
                    <span asp-validation-for="Product.Category_Id" class="mt-2 text-sm text-red-600"></span>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="mt-8 flex flex-col sm:flex-row justify-end space-y-3 sm:space-y-0 sm:space-x-4">
                <a asp-action="Index" class="inline-flex items-center justify-center px-6 py-3 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none">
                    <i class="fas fa-arrow-left mr-2"></i> Back to List
                </a>
                <button type="submit" class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-all duration-200 transform hover:scale-105">
                    <i class="fas @(Model.Product?.Product_Id != 0 ? "fa-save" : "fa-plus") mr-2"></i> @actionText Product
                </button>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.querySelector('form');
            form.classList.add('animate-fade-in-up');

            // Image Cropping Functionality
            let cropper;
            const fileInput = document.getElementById('fileInput');
            const imagePreview = document.getElementById('imagePreview');
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');
            const currentImageContainer = document.getElementById('currentImageContainer');
            const cropperControls = document.getElementById('cropperControls');
            const productImage = document.getElementById('productImage');
            const croppedImageData = document.getElementById('croppedImageData');

            fileInput.addEventListener('change', function(e) {
                const files = e.target.files;
                if (files && files.length > 0) {
                    const file = files[0];
                    if (!file.type.match('image.*')) {
                        alert('Please select an image file (JPEG, PNG)');
                        fileInput.value = '';
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = function(event) {
                        // Destroy previous cropper if exists
                        if (cropper) {
                            cropper.destroy();
                        }

                        // Show preview container
                        imagePreview.src = event.target.result;
                        imagePreviewContainer.style.display = 'block';
                        cropperControls.classList.remove('hidden');
                        currentImageContainer.classList.add('hidden');

                        // Initialize cropper with default settings
                        cropper = new Cropper(imagePreview, {
                            aspectRatio: 1, // Square ratio by default
                            viewMode: 1,    // Crop within the container
                            autoCropArea: 0.8,
                            responsive: true,
                            guides: true
                        });
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Crop button handler
            document.getElementById('cropImage').addEventListener('click', function() {
                const canvas = cropper.getCroppedCanvas({
                    fillColor: '#fff',
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high',
                });

                if (canvas) {
                    // Convert canvas to blob
                    canvas.toBlob(function(blob) {
                        // Create a new File from the Blob
                        const file = new File([blob], fileInput.files[0].name, {
                            type: 'image/jpeg',
                            lastModified: Date.now()
                        });

                        // Update file input
                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(file);
                        fileInput.files = dataTransfer.files;

                        // Update preview
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            productImage.src = e.target.result;
                            croppedImageData.value = e.target.result;
                        };
                        reader.readAsDataURL(blob);

                        // Hide cropper and show result
                        imagePreviewContainer.style.display = 'none';
                        currentImageContainer.classList.remove('hidden');
                        cropper.destroy();
                    }, 'image/jpeg', 0.9); // 90% quality
                }
            });

            // Cancel crop button handler
            document.getElementById('cancelCrop').addEventListener('click', function() {
                imagePreviewContainer.style.display = 'none';
                currentImageContainer.classList.remove('hidden');
                fileInput.value = '';
                if (cropper) {
                    cropper.destroy();
                }
            });

            // Stock Management Scripts
            let stockIndex = @(Model.Stocks != null ? Model.Stocks.Count : 0);
            document.getElementById('addStock').addEventListener('click', () => {
                const stockEntry = `
                    <div class="stock-entry grid grid-cols-1 sm:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200">
                        <div>
                            <select name="Stocks[${stockIndex}].Size" class="stock-size focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md transition duration-150 ease-in-out" required>
                                <option value="S">S</option>
                                <option value="M">M</option>
                                <option value="L">L</option>
                                <option value="XL">XL</option>
                                <option value="XXL">XXL</option>
                                <option value="XXXL">XXXL</option>
                            </select>
                            <span class="size-error mt-2 text-sm text-red-600 hidden">Please select a size</span>
                        </div>
                        <div>
                            <input type="number" name="Stocks[${stockIndex}].Quantity"
                                   class="stock-quantity focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary block w-full px-3 py-2 sm:text-sm border-gray-300 rounded-md transition duration-150 ease-in-out"
                                   placeholder="Quantity" min="0" required />
                            <span class="quantity-error mt-2 text-sm text-red-600 hidden">Quantity must be non-negative</span>
                        </div>
                        <div class="flex items-center">
                            <button type="button" class="remove-stock inline-flex items-center px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-200 transform hover:scale-105">
                                <i class="fas fa-trash-alt mr-2"></i> Remove
                            </button>
                        </div>
                    </div>`;
                document.getElementById('stockEntries').insertAdjacentHTML('beforeend', stockEntry);
                stockIndex++;
            });

            // Remove stock entry
            document.addEventListener('click', (e) => {
                if (e.target.closest('.remove-stock')) {
                    e.target.closest('.stock-entry').remove();
                }
            });

            // Validate form on submission
            form.addEventListener('submit', (e) => {
                let hasError = false;
                const stockEntries = document.querySelectorAll('.stock-entry');

                stockEntries.forEach(entry => {
                    const sizeSelect = entry.querySelector('.stock-size');
                    const quantityInput = entry.querySelector('.stock-quantity');
                    const sizeError = entry.querySelector('.size-error');
                    const quantityError = entry.querySelector('.quantity-error');

                    // Reset error states
                    sizeError.classList.add('hidden');
                    quantityError.classList.add('hidden');
                    sizeSelect.classList.remove('border-red-500');
                    quantityInput.classList.remove('border-red-500');

                    // Validate size
                    if (!sizeSelect.value) {
                        sizeError.classList.remove('hidden');
                        sizeSelect.classList.add('border-red-500');
                        hasError = true;
                    }

                    // Validate quantity
                    if (quantityInput.value < 0 || quantityInput.value === '') {
                        quantityError.classList.remove('hidden');
                        quantityInput.classList.add('border-red-500');
                        hasError = true;
                    }
                });

                if (hasError) {
                    e.preventDefault();
                }
            });
        });
    </script>
    <style>
        .animate-fade-in-up {
            animation: fadeInUp 0.5s ease-out;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .stock-entry {
            border: 1px solid #e5e7eb;
        }

            .stock-entry:hover {
                background-color: #f9fafb;
            }
        /* Cropper.js custom styles */
        .cropper-view-box {
            outline: 1px solid #39f;
            outline-color: rgba(51, 153, 255, 0.75);
        }
    </style>
}