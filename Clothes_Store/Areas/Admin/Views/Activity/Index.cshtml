@model IEnumerable<Clothes_Models.Models.AdminActivity>

@{
    ViewData["Title"] = "Activity Log";
}

<div class="w-full px-0 sm:max-w-7xl sm:mx-auto sm:px-4 sm:px-6 lg:px-8 py-2 sm:py-8">
    <!-- Header Section -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 sm:mb-8 gap-3 sm:gap-4 px-3 sm:px-0">
        <div>
            <h1 class="text-xl sm:text-2xl font-bold text-gray-900">Activity Log</h1>
            <p class="mt-1 text-xs sm:text-sm text-gray-500">Monitor and track all admin activities</p>
        </div>

        <div class="flex flex-col sm:flex-row gap-2 sm:gap-3 w-full sm:w-auto">
            <!-- Search Input -->
            <div class="relative flex-grow sm:flex-grow-0 sm:w-64">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400 text-xs sm:text-sm"></i>
                </div>
                <input type="text" id="searchInput" placeholder="Search activities..."
                       class="pl-9 sm:pl-10 pr-3 py-1.5 sm:py-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary shadow-sm text-xs sm:text-sm transition-all duration-200">
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-5 mb-4 sm:mb-8 px-3 sm:px-0">
        <div class="bg-white p-3 sm:p-5 rounded-lg sm:rounded-xl shadow-sm border-l-4 border-primary hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs sm:text-sm font-medium text-gray-500">Total Activities</p>
                    <p class="text-lg sm:text-2xl font-semibold text-gray-900">@Model.Count()</p>
                </div>
                <div class="p-2 sm:p-3 rounded-full bg-primary bg-opacity-10 text-primary">
                    <i class="fas fa-history text-sm sm:text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white p-3 sm:p-5 rounded-lg sm:rounded-xl shadow-sm border-l-4 border-blue-500 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs sm:text-sm font-medium text-gray-500">Today's Activities</p>
                    <p class="text-lg sm:text-2xl font-semibold text-gray-900">
                        @Model.Count(a => a.ActivityDate.Date == DateTime.Today)
                    </p>
                </div>
                <div class="p-2 sm:p-3 rounded-full bg-blue-500 bg-opacity-10 text-blue-500">
                    <i class="fas fa-calendar-day text-sm sm:text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white p-3 sm:p-5 rounded-lg sm:rounded-xl shadow-sm border-l-4 border-green-500 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs sm:text-sm font-medium text-gray-500">Unique IPs</p>
                    <p class="text-lg sm:text-2xl font-semibold text-gray-900">
                        @Model.Select(a => a.IpAddress).Distinct().Count()
                    </p>
                </div>
                <div class="p-2 sm:p-3 rounded-full bg-green-500 bg-opacity-10 text-green-500">
                    <i class="fas fa-network-wired text-sm sm:text-xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    @if (!Model.Any())
    {
        <div class="bg-white shadow-lg rounded-lg sm:rounded-xl p-6 sm:p-8 text-center mx-3 sm:mx-0">
            <div class="mx-auto h-16 sm:h-24 w-16 sm:w-24 text-gray-300 mb-3 sm:mb-4">
                <i class="fas fa-clipboard-list text-4xl sm:text-6xl opacity-50"></i>
            </div>
            <h3 class="text-base sm:text-lg font-medium text-gray-900">No activities found</h3>
            <p class="mt-1 text-xs sm:text-sm text-gray-500">Activities will appear here when admins perform actions</p>
        </div>
    }
    else
    {
        <div class="bg-white shadow-none sm:shadow rounded-none sm:rounded-xl overflow-hidden mx-0 sm:mx-0">
            <!-- Table Header -->
            <div class="px-3 sm:px-5 py-3 sm:py-4 border-b border-gray-200 bg-gray-50 rounded-t-none sm:rounded-t-xl">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2 sm:gap-4">
                    <h3 class="text-base sm:text-lg font-medium text-gray-900">Recent Activities</h3>
                    <div class="flex items-center space-x-2 sm:space-x-3">
                        <div class="relative">
                            <select id="rowsPerPage" class="appearance-none bg-white border border-gray-300 rounded-lg pl-2 sm:pl-3 pr-6 sm:pr-8 py-1 sm:py-2 text-xs sm:text-sm focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary shadow-sm">
                                <option value="10">10 per page</option>
                                <option value="25" selected>25 per page</option>
                                <option value="50">50 per page</option>
                                <option value="100">100 per page</option>
                            </select>
                            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-1 sm:px-2 text-gray-700">
                                <i class="fas fa-chevron-down text-xs"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50 hidden sm:table-header-group">
                        <tr>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Activity Type</th>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200" id="tableBody">
                        @foreach (var activity in Model)
                        {
                            <tr class="hover:bg-gray-50 transition-colors duration-150 block sm:table-row mb-3 sm:mb-0 border-b sm:border-b-0 border-gray-200">
                                <!-- Mobile View -->
                                <td class="block sm:hidden px-3 py-3">
                                    <div class="flex justify-between items-start">
                                        <div class="font-medium text-gray-900 text-sm">@activity.User?.UserName</div>
                                        <div class="text-xs text-gray-500">
                                            @activity.ActivityDate.ToString("g")
                                        </div>
                                    </div>
                                    <div class="mt-2">
                                        <div class="text-sm text-gray-900 font-medium">@activity.ActivityType</div>
                                        <div class="text-xs text-gray-500 mt-1">@activity.Description</div>
                                        <div class="mt-2 text-xs text-gray-500">
                                            <i class="fas fa-network-wired mr-1"></i> @activity.IpAddress
                                        </div>
                                    </div>
                                </td>

                                <!-- Desktop View -->
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="ml-2">
                                            <div class="text-sm font-medium text-gray-900">@activity.User?.UserName</div>
                                            <div class="text-xs text-gray-500">@activity.User?.Email</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-900 font-medium">@activity.ActivityType</td>
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-500 max-w-xs">@activity.Description</td>
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-500 whitespace-nowrap">
                                    @activity.ActivityDate.ToString("g")
                                </td>
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-500">
                                    <div class="flex items-center">
                                        <i class="fas fa-network-wired mr-2 text-gray-400"></i>
                                        @activity.IpAddress
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="px-3 sm:px-5 py-3 sm:py-4 flex items-center justify-between border-t border-gray-200 bg-gray-50 rounded-b-none sm:rounded-b-xl">
                <div class="flex-1 flex justify-between sm:hidden">
                    <button id="prevPageMobile" class="relative inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                        Previous
                    </button>
                    <button id="nextPageMobile" class="ml-3 relative inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                        Next
                    </button>
                </div>
                <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                    <div>
                        <p class="text-xs sm:text-sm text-gray-700" id="paginationInfo">
                            Showing <span class="font-medium">1</span> to <span class="font-medium">25</span> of <span class="font-medium">@Model.Count()</span> results
                        </p>
                    </div>
                    <div>
                        <nav class="relative z-0 inline-flex rounded-lg shadow-sm -space-x-px" aria-label="Pagination">
                            <button id="firstPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 rounded-l-lg border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">First</span>
                                <i class="fas fa-angle-double-left text-xs"></i>
                            </button>
                            <button id="prevPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Previous</span>
                                <i class="fas fa-angle-left text-xs"></i>
                            </button>
                            <div id="pageNumbers" class="flex">
                                <!-- Page numbers will be inserted here by JavaScript -->
                            </div>
                            <button id="nextPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Next</span>
                                <i class="fas fa-angle-right text-xs"></i>
                            </button>
                            <button id="lastPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 rounded-r-lg border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Last</span>
                                <i class="fas fa-angle-double-right text-xs"></i>
                            </button>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<script>
    const tableBody = document.getElementById('tableBody');
    const searchInput = document.getElementById('searchInput');
    const rowsPerPage = document.getElementById('rowsPerPage');
    const paginationInfo = document.getElementById('paginationInfo');
    const pageNumbers = document.getElementById('pageNumbers');
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    const firstPage = document.getElementById('firstPage');
    const lastPage = document.getElementById('lastPage');
    const prevPageMobile = document.getElementById('prevPageMobile');
    const nextPageMobile = document.getElementById('nextPageMobile');

    let currentPage = 1;
    let rowsPerPageValue = 25;
    let allActivities = Array.from(tableBody.querySelectorAll('tr'));
    let filteredActivities = [...allActivities];

    function init() {
        updateTable();
        setupEventListeners();
    }

    function setupEventListeners() {
        searchInput.addEventListener('input', handleSearch);
        rowsPerPage.addEventListener('change', handleRowsPerPageChange);
        prevPage.addEventListener('click', () => changePage(-1));
        nextPage.addEventListener('click', () => changePage(1));
        firstPage.addEventListener('click', () => goToPage(1));
        lastPage.addEventListener('click', () => goToPage(Math.ceil(filteredActivities.length / rowsPerPageValue)));
        prevPageMobile.addEventListener('click', () => changePage(-1));
        nextPageMobile.addEventListener('click', () => changePage(1));
    }

    function handleSearch() {
        const searchTerm = searchInput.value.toLowerCase();
        filteredActivities = allActivities.filter(row => {
            const cells = row.querySelectorAll('td');
            return Array.from(cells).some(cell =>
                cell.textContent.toLowerCase().includes(searchTerm)
            );
        });
        currentPage = 1;
        updateTable();
    }

    function handleRowsPerPageChange() {
        rowsPerPageValue = parseInt(rowsPerPage.value);
        currentPage = 1;
        updateTable();
    }

    function changePage(delta) {
        const newPage = currentPage + delta;
        const totalPages = Math.ceil(filteredActivities.length / rowsPerPageValue);

        if (newPage > 0 && newPage <= totalPages) {
            currentPage = newPage;
            updateTable();
        }
    }

    function goToPage(page) {
        const totalPages = Math.ceil(filteredActivities.length / rowsPerPageValue);

        if (page > 0 && page <= totalPages) {
            currentPage = page;
            updateTable();
        }
    }

    function updateTable() {
        const startIndex = (currentPage - 1) * rowsPerPageValue;
        const endIndex = startIndex + rowsPerPageValue;
        const paginatedActivities = filteredActivities.slice(startIndex, endIndex);

        tableBody.innerHTML = '';
        paginatedActivities.forEach(row => tableBody.appendChild(row.cloneNode(true)));
        updatePaginationInfo();
        updatePaginationControls();
    }

    function updatePaginationInfo() {
        const startItem = (currentPage - 1) * rowsPerPageValue + 1;
        const endItem = Math.min(currentPage * rowsPerPageValue, filteredActivities.length);

        paginationInfo.innerHTML = `
            Showing <span class="font-medium">${startItem}</span> to <span class="font-medium">${endItem}</span> of
            <span class="font-medium">${filteredActivities.length}</span> results
        `;
    }

    function updatePaginationControls() {
        const totalPages = Math.ceil(filteredActivities.length / rowsPerPageValue);

        pageNumbers.innerHTML = '';
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);

        if (currentPage <= 3) endPage = Math.min(5, totalPages);
        if (currentPage >= totalPages - 2) startPage = Math.max(1, totalPages - 4);

        for (let i = startPage; i <= endPage; i++) {
            const pageBtn = document.createElement('button');
            pageBtn.className = `relative inline-flex items-center px-2 sm:px-4 py-1 sm:py-2 border text-xs sm:text-sm font-medium transition-colors duration-200 ${
                i === currentPage
                    ? 'z-10 bg-primary border-primary text-white'
                    : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
            }`;
            pageBtn.textContent = i;
            pageBtn.addEventListener('click', () => goToPage(i));
            pageNumbers.appendChild(pageBtn);
        }

        [prevPage, nextPage, firstPage, lastPage, prevPageMobile, nextPageMobile].forEach(btn => {
            btn.disabled = (
                (btn === prevPage || btn === firstPage || btn === prevPageMobile) ? currentPage === 1 :
                (btn === nextPage || btn === lastPage || btn === nextPageMobile) ? currentPage === totalPages :
                false
            );
        });
    }

    document.addEventListener('DOMContentLoaded', init);
</script>