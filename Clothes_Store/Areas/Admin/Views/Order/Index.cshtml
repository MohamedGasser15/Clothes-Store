@model IEnumerable<Clothes_Models.Models.OrderHeader>
@using Clothes_Utilities

<style>
    /* Notification styles - same as product details page */
    .notification-container {
        position: fixed;
        top: 1.5rem;
        right: 1.5rem;
        z-index: 1000;
    }

    .notification {
        padding: 1rem 1.5rem;
        color: white;
        border-radius: 0.75rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
        transform: translateX(150%);
        transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        margin-bottom: 1rem;
        position: relative;
        overflow: hidden;
    }

        .notification.success {
            background-color: #088178;
        }

        .notification.error {
            background-color: #ef4444;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.hide {
            transform: translateX(150%);
            opacity: 0;
        }

    .notification-icon {
        margin-right: 0.75rem;
        font-size: 1.25rem;
    }

    .notification-close {
        margin-left: 1rem;
        cursor: pointer;
        opacity: 0.7;
        transition: opacity 0.2s;
    }

        .notification-close:hover {
            opacity: 1;
        }

    .notification-progress {
        position: absolute;
        bottom: 0;
        left: 0;
        height: 4px;
        width: 100%;
        background: rgba(255, 255, 255, 0.3);
    }

    .notification-progress-bar {
        height: 100%;
        width: 100%;
        background: white;
        animation: progress 3s linear forwards;
        transform-origin: left;
    }

    @@keyframes progress {
        0% {
            transform: scaleX(0);
        }

        100% {
            transform: scaleX(1);
        }
    }

    /* Bounce animation for cart button */
    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }

        40% {
            transform: translateY(-10px);
        }

        60% {
            transform: translateY(-5px);
        }
    }

    .bounce-effect {
        animation: bounce 1s;
    }

    /* Existing styles */
    .pro-cart-button {
        width: 40px;
        height: 40px;
        line-height: 40px;
        border-radius: 50px;
        background-color: #e8f6ea;
        font-weight: 500;
        color: #088178;
        border: 1px solid #cce7d0;
        position: absolute;
        bottom: 20px;
        right: 10px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        padding: 0;
        text-decoration: none;
        transition: all 0.3s ease;
    }

        .pro-cart-button:hover {
            background-color: #cce7d0;
            color: #066156;
            transform: scale(1.05);
        }
</style>
<div class="notification-container">
    @if (TempData["Success"] != null)
    {
        <div id="successNotification" class="notification success">
            <i class="fas fa-check-circle notification-icon"></i>
            <span>@TempData["Success"]</span>
            <span class="notification-close" onclick="hideNotification('successNotification')">
                <i class="fas fa-times"></i>
            </span>
            <div class="notification-progress">
                <div class="notification-progress-bar"></div>
            </div>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div id="errorNotification" class="notification error">
            <i class="fas fa-exclamation-circle notification-icon"></i>
            <span>@TempData["Error"]</span>
            <span class="notification-close" onclick="hideNotification('errorNotification')">
                <i class="fas fa-times"></i>
            </span>
            <div class="notification-progress">
                <div class="notification-progress-bar"></div>
            </div>
        </div>
    }
</div>
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header Section -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4">
        <div>
            <h1 class="text-2xl font-bold text-gray-900">Orders Managment</h1>
            <p class="mt-1 text-sm text-gray-500">Manage customer orders</p>
        </div>

        <div class="flex gap-3 w-full sm:w-auto">
            <!-- Search Input -->
            <div class="relative flex-grow sm:flex-grow-0 sm:w-72">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400"></i>
                </div>
                <input type="text" id="searchInput" placeholder="Search orders..."
                       class="pl-10 pr-4 py-2.5 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary shadow-sm">
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 sm:grid-cols-4 gap-5 mb-8">
        <div class="bg-white p-5 rounded-xl shadow-sm border-l-4 border-primary hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-500">Total Orders</p>
                    <p class="text-2xl font-semibold text-gray-900">@Model.Count()</p>
                </div>
                <div class="p-3 rounded-full bg-primary bg-opacity-10 text-primary">
                    <i class="fas fa-shopping-bag text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white p-5 rounded-xl shadow-sm border-l-4 border-blue-500 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-500">Pending</p>
                    <p class="text-2xl font-semibold text-gray-900">@Model.Count(o => o.OrderStatus == SD.StatusPending)</p>
                </div>
                <div class="p-3 rounded-full bg-blue-500 bg-opacity-10 text-blue-500">
                    <i class="fas fa-clock text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white p-5 rounded-xl shadow-sm border-l-4 border-green-500 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-500">Approved</p>
                    <p class="text-2xl font-semibold text-gray-900">@Model.Count(o => o.OrderStatus == SD.StatusApproved)</p>
                </div>
                <div class="p-3 rounded-full bg-green-500 bg-opacity-10 text-green-500">
                    <i class="fas fa-check-circle text-xl"></i>
                </div>
            </div>
        </div>

        <div class="bg-white p-5 rounded-xl shadow-sm border-l-4 border-red-500 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-500">Cancelled</p>
                    <p class="text-2xl font-semibold text-gray-900">@Model.Count(o => o.OrderStatus == "Cancelled")</p>
                </div>
                <div class="p-3 rounded-full bg-red-500 bg-opacity-10 text-red-500">
                    <i class="fas fa-times-circle text-xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    @if (Model.Count() == 0)
    {
        <div class="bg-white shadow-lg rounded-xl p-8 text-center">
            <div class="mx-auto h-24 w-24 text-gray-300 mb-4">
                <i class="fas fa-shopping-bag text-6xl opacity-50"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900">No orders found</h3>
            <p class="mt-1 text-sm text-gray-500">When orders are placed, they will appear here</p>
        </div>
    }
    else
    {
        <div class="bg-white shadow rounded-xl overflow-hidden">
            <!-- Table Header -->
            <div class="px-5 py-4 border-b border-gray-200 bg-gray-50 rounded-t-xl">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                    <h3 class="text-lg font-medium text-gray-900">Order List</h3>
                    <div class="flex items-center space-x-3">
                        <!-- Status Filter Buttons -->
                        <div class="flex space-x-2">
                            <button id="filterAll" class="px-3 py-2 text-xs font-medium rounded-lg bg-primary text-white">
                                All Orders
                            </button>
                            <button id="filterPending" class="px-3 py-2 text-xs font-medium rounded-lg bg-yellow-100 text-yellow-800 hover:bg-yellow-200">
                                Pending
                            </button>
                            <button id="filterApproved" class="px-3 py-2 text-xs font-medium rounded-lg bg-green-100 text-green-800 hover:bg-green-200">
                                Approved
                            </button>
                            <button id="filterInProgress" class="px-3 py-2 text-xs font-medium rounded-lg bg-blue-100 text-blue-800 hover:bg-blue-200">
                                In Progress
                            </button>
                        </div>

                        <!-- Rows per page dropdown -->
                        <div class="relative">
                            <select id="rowsPerPage" class="appearance-none bg-white border border-gray-300 rounded-lg pl-3 pr-8 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary shadow-sm">
                                <option value="5">5 per page</option>
                                <option value="10" selected>10 per page</option>
                                <option value="25">25 per page</option>
                                <option value="50">50 per page</option>
                            </select>
                            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                                <i class="fas fa-chevron-down text-xs"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Country</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200" id="tableBody">
                        @foreach (var order in Model)
                        {
                            <tr class="hover:bg-gray-50 transition-colors duration-150">
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@order.Id</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@order.Name</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@order.PhoneNumber</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@order.ApplicationUser.Email</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@order.Country</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$@order.OrderTotal</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                                    @(order.OrderStatus == SD.PaymentStatusApproved ? "bg-green-100 text-green-800" :
                                      order.OrderStatus == SD.StatusPending ? "bg-yellow-100 text-yellow-800" :
                                      order.OrderStatus == SD.StatusShipped ? "bg-blue-100 text-blue-800" :
                                      "bg-red-100 text-red-800")">
                                        @(order.OrderStatus == "Shipped" ? "In Progress" : order.OrderStatus)
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <div class="flex space-x-3">
                                        <!-- Details Button -->
                                        <a asp-action="Details" asp-route-id="@order.Id"
                                           class="inline-flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md">
                                            <i class="fas fa-eye mr-2"></i> Details
                                        </a>

                                        <!-- Status Buttons -->
                                        @if (order.OrderStatus == SD.StatusPending)
                                        {
                                            <form asp-action="Approve" method="post" class="inline">
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button asp-action="Approve" asp-route-id="@order.Id"
                                                        class="inline-flex items-center px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md">
                                                    <i class="fas fa-check mr-2"></i> Approve
                                                </button>
                                            </form>

                                            <form asp-action="Cancel" method="post" class="inline">
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button asp-action="Cancel" asp-route-id="@order.Id"
                                                        class="inline-flex items-center px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md">
                                                    <i class="fas fa-times mr-2"></i> Cancel
                                                </button>
                                            </form>
                                        }
                                        else if (order.OrderStatus == SD.StatusApproved)
                                        {
                                            <form asp-action="Cancel" method="post" class="inline">
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button asp-action="Cancel" asp-route-id="@order.Id"
                                                        class="inline-flex items-center px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md">
                                                    <i class="fas fa-times mr-2"></i> Refund
                                                </button>
                                            </form>
                                        }

                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="px-5 py-4 flex items-center justify-between border-t border-gray-200 bg-gray-50 rounded-b-xl">
                <div class="flex-1 flex justify-between sm:hidden">
                    <button id="prevPageMobile" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                        Previous
                    </button>
                    <button id="nextPageMobile" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                        Next
                    </button>
                </div>
                <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                    <div>
                        <p class="text-sm text-gray-700" id="paginationInfo">
                            Showing <span class="font-medium">1</span> to <span class="font-medium">10</span> of <span class="font-medium">@Model.Count()</span> results
                        </p>
                    </div>
                    <div>
                        <nav class="relative z-0 inline-flex rounded-lg shadow-sm -space-x-px" aria-label="Pagination">
                            <button id="firstPage" class="relative inline-flex items-center px-3 py-2 rounded-l-lg border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">First</span>
                                <i class="fas fa-angle-double-left"></i>
                            </button>
                            <button id="prevPage" class="relative inline-flex items-center px-3 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Previous</span>
                                <i class="fas fa-angle-left"></i>
                            </button>
                            <div id="pageNumbers" class="flex">
                                <!-- Page numbers will be inserted here by JavaScript -->
                            </div>
                            <button id="nextPage" class="relative inline-flex items-center px-3 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Next</span>
                                <i class="fas fa-angle-right"></i>
                            </button>
                            <button id="lastPage" class="relative inline-flex items-center px-3 py-2 rounded-r-lg border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Last</span>
                                <i class="fas fa-angle-double-right"></i>
                            </button>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- JavaScript for table functionality -->
<script>
    // DOM Elements
    const tableBody = document.getElementById('tableBody');
    const searchInput = document.getElementById('searchInput');
    const rowsPerPage = document.getElementById('rowsPerPage');
    const paginationInfo = document.getElementById('paginationInfo');
    const pageNumbers = document.getElementById('pageNumbers');
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    const firstPage = document.getElementById('firstPage');
    const lastPage = document.getElementById('lastPage');
    const prevPageMobile = document.getElementById('prevPageMobile');
    const nextPageMobile = document.getElementById('nextPageMobile');
    const filterAll = document.getElementById('filterAll');
    const filterPending = document.getElementById('filterPending');
    const filterApproved = document.getElementById('filterApproved');
    const filterInProgress = document.getElementById('filterInProgress');

    // State
    let currentPage = 1;
    let rowsPerPageValue = 10;
    let allOrders = Array.from(tableBody.querySelectorAll('tr'));
    let filteredOrders = [...allOrders];
    let sortColumn = null;
    let sortDirection = 1; // 1 for ascending, -1 for descending

    // Initialize
    function init() {
        updateTable();
        setupEventListeners();
    }

    // Event Listeners
    function setupEventListeners() {
        searchInput.addEventListener('input', handleSearch);
        rowsPerPage.addEventListener('change', handleRowsPerPageChange);
        prevPage.addEventListener('click', () => changePage(-1));
        nextPage.addEventListener('click', () => changePage(1));
        firstPage.addEventListener('click', () => goToPage(1));
        lastPage.addEventListener('click', () => goToPage(Math.ceil(filteredOrders.length / rowsPerPageValue)));
        prevPageMobile.addEventListener('click', () => changePage(-1));
        nextPageMobile.addEventListener('click', () => changePage(1));
        filterAll.addEventListener('click', () => filterOrders('All'));
        filterPending.addEventListener('click', () => filterOrders('Pending'));
        filterApproved.addEventListener('click', () => filterOrders('Approved'));
        filterInProgress.addEventListener('click', () => filterOrders('InProgress'));
    }

    // Search Functionality
    function handleSearch() {
        const searchTerm = searchInput.value.toLowerCase();
        filteredOrders = allOrders.filter(row => {
            const orderId = row.cells[0].textContent.toLowerCase();
            const customerName = row.cells[1].textContent.toLowerCase();
            const email = row.cells[3].textContent.toLowerCase();

            return orderId.includes(searchTerm) ||
                   customerName.includes(searchTerm) ||
                   email.includes(searchTerm);
        });
        currentPage = 1;
        updateTable();
    }

    // Filter Functionality
    function filterOrders(status) {
        // Reset all button styles
        [filterAll, filterPending, filterApproved, filterInProgress].forEach(btn => {
            btn.classList.remove('text-white');
            btn.classList.remove('bg-primary');
            btn.classList.add('bg-opacity-100');
        });

        // Style the active button
        const activeButton = {
            'All': filterAll,
            'Pending': filterPending,
            'Approved': filterApproved,
            'InProgress': filterInProgress
        }[status];

        activeButton.classList.add('text-white');
        activeButton.classList.add('bg-primary');
        activeButton.classList.remove('bg-opacity-100');

        if (status === 'All') {
            filteredOrders = [...allOrders];
        } else {
            filteredOrders = allOrders.filter(row => {
                const rowStatus = row.cells[6].textContent.trim();
                return rowStatus === status;
            });
        }

        currentPage = 1;
        updateTable();
    }

    // Pagination
    function handleRowsPerPageChange() {
        rowsPerPageValue = parseInt(rowsPerPage.value);
        currentPage = 1;
        updateTable();
    }

    function changePage(delta) {
        const newPage = currentPage + delta;
        const totalPages = Math.ceil(filteredOrders.length / rowsPerPageValue);

        if (newPage > 0 && newPage <= totalPages) {
            currentPage = newPage;
            updateTable();
        }
    }

    function goToPage(page) {
        const totalPages = Math.ceil(filteredOrders.length / rowsPerPageValue);

        if (page > 0 && page <= totalPages) {
            currentPage = page;
            updateTable();
        }
    }

    // Update Table Display
    function updateTable() {
        const startIndex = (currentPage - 1) * rowsPerPageValue;
        const endIndex = startIndex + rowsPerPageValue;
        const paginatedOrders = filteredOrders.slice(startIndex, endIndex);

        // Clear table
        tableBody.innerHTML = '';

        // Add filtered/sorted rows
        paginatedOrders.forEach(row => tableBody.appendChild(row.cloneNode(true)));

        // Update pagination info
        updatePaginationInfo();

        // Update pagination controls
        updatePaginationControls();
    }

    function updatePaginationInfo() {
        const startItem = (currentPage - 1) * rowsPerPageValue + 1;
        const endItem = Math.min(currentPage * rowsPerPageValue, filteredOrders.length);

        paginationInfo.innerHTML = `
            Showing <span class="font-medium">${startItem}</span> to <span class="font-medium">${endItem}</span> of
            <span class="font-medium">${filteredOrders.length}</span> results
        `;
    }

    function updatePaginationControls() {
        const totalPages = Math.ceil(filteredOrders.length / rowsPerPageValue);

        // Clear existing page numbers
        pageNumbers.innerHTML = '';

        // Determine which pages to show (max 5 pages at a time)
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);

        if (currentPage <= 3) {
            endPage = Math.min(5, totalPages);
        }
        if (currentPage >= totalPages - 2) {
            startPage = Math.max(1, totalPages - 4);
        }

        // Add page number buttons
        for (let i = startPage; i <= endPage; i++) {
            const pageBtn = document.createElement('button');
            pageBtn.className = `relative inline-flex items-center px-4 py-2 border text-sm font-medium transition-colors duration-200 ${
                i === currentPage
                    ? 'z-10 bg-primary border-primary text-white'
                    : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
            }`;
            pageBtn.textContent = i;
            pageBtn.addEventListener('click', () => goToPage(i));
            pageNumbers.appendChild(pageBtn);
        }

        // Enable/disable navigation buttons
        prevPage.disabled = currentPage === 1;
        nextPage.disabled = currentPage === totalPages;
        firstPage.disabled = currentPage === 1;
        lastPage.disabled = currentPage === totalPages;
        prevPageMobile.disabled = currentPage === 1;
        nextPageMobile.disabled = currentPage === totalPages;
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', init);
     // Notification functions
                // In your Scripts section
        document.addEventListener('DOMContentLoaded', function() {
            // Show success notification if exists
            const successNotification = document.getElementById('successNotification');
            if (successNotification) {
                showNotification(successNotification);
            }

            // Show error notification if exists
            const errorNotification = document.getElementById('errorNotification');
            if (errorNotification) {
                showNotification(errorNotification);
            }
        });

        function showNotification(notification) {
            notification.classList.add('show');

            // Auto-hide after 5 seconds (longer for errors)
            const hideTime = notification.classList.contains('error') ? 5000 : 3000;
            const autoHide = setTimeout(() => {
                hideNotification(notification.id);
            }, hideTime);

            // Pause on hover
            notification.addEventListener('mouseenter', () => {
                clearTimeout(autoHide);
                notification.querySelector('.notification-progress-bar').style.animationPlayState = 'paused';
            });

            notification.addEventListener('mouseleave', () => {
                const progressBar = notification.querySelector('.notification-progress-bar');
                const remainingWidth = 1 - (progressBar.offsetWidth / progressBar.parentElement.offsetWidth);
                const remainingTime = remainingWidth * hideTime;

                progressBar.style.animationPlayState = 'running';
                setTimeout(() => {
                    hideNotification(notification.id);
                }, remainingTime);
            });
        }

        window.hideNotification = function(id) {
            const notification = document.getElementById(id);
            if (notification) {
                notification.classList.remove('show');
                notification.classList.add('hide');

                setTimeout(() => {
                    notification.remove();
                }, 500);
            }
        };
</script>