@model IEnumerable<Clothes_Models.Models.OrderHeader>
@using Clothes_Utilities

<div class="w-full px-0 sm:max-w-7xl sm:mx-auto sm:px-4 sm:px-6 lg:px-8 py-2 sm:py-8">
    <!-- Header Section -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 sm:mb-8 gap-3 sm:gap-4 px-3 sm:px-0">
        <div>
            <h1 class="text-xl sm:text-2xl font-bold text-gray-900">Orders Management</h1>
            <p class="mt-1 text-xs sm:text-sm text-gray-500">Manage customer orders</p>
        </div>

        <div class="flex gap-2 sm:gap-3 w-full sm:w-auto">
            <!-- Search Input -->
            <div class="relative flex-grow sm:flex-grow-0 sm:w-64">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400 text-sm"></i>
                </div>
                <input type="text" id="searchInput" placeholder="Search orders..."
                       class="pl-9 sm:pl-10 pr-3 py-2 sm:py-2.5 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary shadow-sm text-sm">
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-5 mb-4 sm:mb-8 px-3 sm:px-0">
        <div class="bg-white p-3 sm:p-5 rounded-lg sm:rounded-xl shadow-sm border-l-4 border-primary hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs sm:text-sm font-medium text-gray-500">Total Orders</p>
                    <p class="text-lg sm:text-2xl font-semibold text-gray-900">@Model.Count()</p>
                </div>
                <div class="p-2 sm:p-3 rounded-full bg-primary bg-opacity-10 text-primary">
                    <i class="fas fa-shopping-bag text-sm sm:text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white p-3 sm:p-5 rounded-lg sm:rounded-xl shadow-sm border-l-4 border-blue-500 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs sm:text-sm font-medium text-gray-500">Pending</p>
                    <p class="text-lg sm:text-2xl font-semibold text-gray-900">@Model.Count(o => o.OrderStatus == SD.StatusPending)</p>
                </div>
                <div class="p-2 sm:p-3 rounded-full bg-blue-500 bg-opacity-10 text-blue-500">
                    <i class="fas fa-clock text-sm sm:text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white p-3 sm:p-5 rounded-lg sm:rounded-xl shadow-sm border-l-4 border-green-500 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs sm:text-sm font-medium text-gray-500">Approved</p>
                    <p class="text-lg sm:text-2xl font-semibold text-gray-900">@Model.Count(o => o.OrderStatus == SD.StatusApproved)</p>
                </div>
                <div class="p-2 sm:p-3 rounded-full bg-green-500 bg-opacity-10 text-green-500">
                    <i class="fas fa-check-circle text-sm sm:text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white p-3 sm:p-5 rounded-lg sm:rounded-xl shadow-sm border-l-4 border-blue-500 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs sm:text-sm font-medium text-gray-500">In Process</p>
                    <p class="text-lg sm:text-2xl font-semibold text-gray-900">@Model.Count(o => o.OrderStatus == SD.StatusInProcess)</p>
                </div>
                <div class="p-2 sm:p-3 rounded-full bg-blue-500 bg-opacity-10 text-blue-500">
                    <i class="fas fa-cog text-sm sm:text-xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    @if (Model.Count() == 0)
    {
        <div class="bg-white shadow-lg rounded-lg sm:rounded-xl p-6 sm:p-8 text-center mx-3 sm:mx-0">
            <div class="mx-auto h-16 sm:h-24 w-16 sm:w-24 text-gray-300 mb-3 sm:mb-4">
                <i class="fas fa-shopping-bag text-4xl sm:text-6xl opacity-50"></i>
            </div>
            <h3 class="text-base sm:text-lg font-medium text-gray-900">No orders found</h3>
            <p class="mt-1 text-xs sm:text-sm text-gray-500">When orders are placed, they will appear here</p>
        </div>
    }
    else
    {
        <div class="bg-white shadow-none sm:shadow rounded-none sm:rounded-xl overflow-hidden mx-0 sm:mx-0">
            <!-- Table Header -->
            <div class="px-3 sm:px-5 py-3 sm:py-4 border-b border-gray-200 bg-gray-50 rounded-t-none sm:rounded-t-xl">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-4">
                    <h3 class="text-base sm:text-lg font-medium text-gray-900">Order List</h3>
                    <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-3 w-full sm:w-auto">
                        <!-- Status Filter Buttons -->
                        <div class="flex flex-wrap gap-1 sm:gap-2 w-full sm:w-auto">
                            <button id="filterAll" class="px-2 sm:px-3 py-1 sm:py-2 text-xs font-medium rounded-lg bg-primary text-white hover:bg-primary-dark">
                                All Orders
                            </button>
                            <button id="filterPending" class="px-2 sm:px-3 py-1 sm:py-2 text-xs font-medium rounded-lg bg-yellow-100 text-yellow-800 hover:bg-yellow-200">
                                Pending
                            </button>
                            <button id="filterApproved" class="px-2 sm:px-3 py-1 sm:py-2 text-xs font-medium rounded-lg bg-green-100 text-green-800 hover:bg-green-200">
                                Approved
                            </button>
                            <button id="filterInProgress" class="px-2 sm:px-3 py-1 sm:py-2 text-xs font-medium rounded-lg bg-blue-100 text-blue-800 hover:bg-blue-200">
                                In Progress
                            </button>
                        </div>

                        <!-- Rows per page dropdown -->
                        <div class="relative w-full sm:w-auto">
                            <select id="rowsPerPage" class="appearance-none bg-white border border-gray-300 rounded-lg pl-2 sm:pl-3 pr-6 sm:pr-8 py-1 sm:py-2 text-xs sm:text-sm focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary shadow-sm w-full sm:w-auto">
                                <option value="5">5 per page</option>
                                <option value="10" selected>10 per page</option>
                                <option value="25">25 per page</option>
                                <option value="50">50 per page</option>
                            </select>
                            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-1 sm:px-2 text-gray-700">
                                <i class="fas fa-chevron-down text-xs"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50 hidden sm:table-header-group">
                        <tr>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200" id="tableBody">
                        @foreach (var order in Model)
                        {
                            <tr class="hover:bg-gray-50 transition-colors duration-150 block sm:table-row mb-3 sm:mb-0 border-b sm:border-b-0 border-gray-200">
                                <!-- Mobile View -->
                                <td class="block sm:hidden px-3 py-3">
                                    <div class="flex justify-between items-start">
                                        <div class="font-medium text-gray-900 text-sm">Order #@order.Id</div>
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                                            @(order.OrderStatus == SD.StatusApproved ? "bg-green-100 text-green-800" :
                                              order.OrderStatus == SD.StatusPending ? "bg-yellow-100 text-yellow-800" :
                                              order.OrderStatus == SD.StatusShipped ? "bg-blue-100 text-blue-800" :
                                              order.OrderStatus == SD.StatusDelivered ? "bg-purple-100 text-purple-800" :
                                              order.OrderStatus == SD.StatusCancelled ? "bg-red-100 text-red-800" :
                                              "bg-gray-100 text-gray-800")">
                                            @(order.OrderStatus == SD.StatusShipped ? "In Progress" :
                                                order.OrderStatus == SD.StatusDelivered ? "Delivered" :
                                                order.OrderStatus)
                                        </span>
                                    </div>
                                    <div class="mt-1 text-sm text-gray-500">@order.Name</div>
                                    <div class="mt-1 text-sm text-gray-500">@order.PhoneNumber</div>
                                    <div class="mt-1 text-sm font-medium">$@order.OrderTotal</div>

                                    <!-- Mobile Actions -->
                                    <div class="mt-2 flex flex-wrap gap-1">
                                        <!-- Details Button -->
                                        <a asp-action="Details" asp-route-id="@order.Id"
                                           class="inline-flex items-center px-3 py-1 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-xs">
                                            <i class="fas fa-eye mr-1"></i> Details
                                        </a>

                                        @if (order.OrderStatus == SD.StatusCancelled || order.OrderStatus == SD.StatusRefunded)
                                        {
                                            <form asp-action="RemoveCanceledRefundedOrders" method="post" class="inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@order.Id" />
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button type="submit"
                                                        class="inline-flex items-center px-3 py-1 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-1 focus:ring-red-500 text-xs"
                                                        onclick="return confirm('Are you sure you want to permanently remove this order?')">
                                                    <i class="fas fa-times mr-1"></i> Remove
                                                </button>
                                            </form>
                                        }

                                        @if (order.OrderStatus == SD.StatusPending)
                                        {
                                            <form asp-action="Approve" method="post" class="inline">
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button asp-action="Approve" asp-route-id="@order.Id"
                                                        class="inline-flex items-center px-3 py-1 bg-green-500 text-white rounded-lg hover:bg-green-600 focus:outline-none focus:ring-1 focus:ring-green-500 text-xs">
                                                    <i class="fas fa-check mr-1"></i> Approve
                                                </button>
                                            </form>

                                            <form asp-action="Cancel" method="post" class="inline">
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button asp-action="Cancel" asp-route-id="@order.Id"
                                                        class="inline-flex items-center px-3 py-1 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-1 focus:ring-red-500 text-xs">
                                                    <i class="fas fa-times mr-1"></i> Cancel
                                                </button>
                                            </form>
                                        }
                                        else if (order.OrderStatus == SD.StatusApproved)
                                        {
                                            <form asp-action="ShipOrder" method="post" class="inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@order.Id" />
                                                <button type="submit"
                                                        class="inline-flex items-center px-3 py-1 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 focus:outline-none focus:ring-1 focus:ring-indigo-500 text-xs">
                                                    <i class="fas fa-truck mr-1"></i> Ship
                                                </button>
                                            </form>

                                            <form asp-action="Cancel" method="post" class="inline">
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button asp-action="Cancel" asp-route-id="@order.Id"
                                                        class="inline-flex items-center px-3 py-1 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-1 focus:ring-red-500 text-xs">
                                                    <i class="fas fa-times mr-1"></i> Refund
                                                </button>
                                            </form>
                                        }

                                        @if (order.OrderStatus == SD.StatusShipped)
                                        {
                                            <form asp-action="MarkAsDelivered" method="post" class="inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@order.Id" />
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button type="submit"
                                                        class="inline-flex items-center px-3 py-1 bg-purple-500 text-white rounded-lg hover:bg-purple-600 focus:outline-none focus:ring-1 focus:ring-purple-500 text-xs">
                                                    <i class="fas fa-check-circle mr-1"></i> Delivered
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </td>

                                <!-- Desktop View -->
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm font-medium text-gray-900">@order.Id</td>
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm text-gray-900">@order.Name</td>
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm text-gray-500">@order.PhoneNumber</td>
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                                        @(order.OrderStatus == SD.StatusApproved ? "bg-green-100 text-green-800" :
                                          order.OrderStatus == SD.StatusPending ? "bg-yellow-100 text-yellow-800" :
                                          order.OrderStatus == SD.StatusShipped ? "bg-blue-100 text-blue-800" :
                                          order.OrderStatus == SD.StatusDelivered ? "bg-purple-100 text-purple-800" :
                                          order.OrderStatus == SD.StatusCancelled ? "bg-red-100 text-red-800" :
                                          "bg-gray-100 text-gray-800")">
                                        @(order.OrderStatus == SD.StatusShipped ? "In Progress" :
                                            order.OrderStatus == SD.StatusDelivered ? "Delivered" :
                                            order.OrderStatus)
                                    </span>
                                </td>
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm text-gray-500">
                                    <div class="flex flex-wrap gap-1 sm:gap-2">
                                        <!-- Details Button -->
                                        <a asp-action="Details" asp-route-id="@order.Id"
                                           class="inline-flex items-center px-3 sm:px-4 py-1 sm:py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 sm:focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md text-xs sm:text-sm">
                                            <i class="fas fa-eye mr-1 sm:mr-2"></i> Details
                                        </a>

                                        @if (order.OrderStatus == SD.StatusCancelled || order.OrderStatus == SD.StatusRefunded)
                                        {
                                            <form asp-action="RemoveCanceledRefundedOrders" method="post">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@order.Id" />
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button type="submit"
                                                        class="inline-flex items-center px-3 sm:px-4 py-1 sm:py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-red-500 focus:ring-offset-1 sm:focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md text-xs sm:text-sm"
                                                        onclick="return confirm('Are you sure you want to permanently remove this order?')">
                                                    <i class="fas fa-times mr-1 sm:mr-2"></i> Remove
                                                </button>
                                            </form>
                                        }

                                        @if (order.OrderStatus == SD.StatusPending)
                                        {
                                            <form asp-action="Approve" method="post" class="inline">
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button asp-action="Approve" asp-route-id="@order.Id"
                                                        class="inline-flex items-center px-3 sm:px-4 py-1 sm:py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-green-500 focus:ring-offset-1 sm:focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md text-xs sm:text-sm">
                                                    <i class="fas fa-check mr-1 sm:mr-2"></i> Approve
                                                </button>
                                            </form>

                                            <form asp-action="Cancel" method="post" class="inline">
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button asp-action="Cancel" asp-route-id="@order.Id"
                                                        class="inline-flex items-center px-3 sm:px-4 py-1 sm:py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-red-500 focus:ring-offset-1 sm:focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md text-xs sm:text-sm">
                                                    <i class="fas fa-times mr-1 sm:mr-2"></i> Cancel
                                                </button>
                                            </form>
                                        }
                                        else if (order.OrderStatus == SD.StatusApproved)
                                        {
                                            <form asp-action="ShipOrder" method="post" class="inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@order.Id" />
                                                <button type="submit"
                                                        class="inline-flex items-center px-3 sm:px-4 py-1 sm:py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-indigo-500 focus:ring-offset-1 sm:focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md text-xs sm:text-sm">
                                                    <i class="fas fa-truck mr-1 sm:mr-2"></i> Ship Order
                                                </button>
                                            </form>

                                            <form asp-action="Cancel" method="post" class="inline">
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button asp-action="Cancel" asp-route-id="@order.Id"
                                                        class="inline-flex items-center px-3 sm:px-4 py-1 sm:py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-red-500 focus:ring-offset-1 sm:focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md text-xs sm:text-sm">
                                                    <i class="fas fa-times mr-1 sm:mr-2"></i> Refund
                                                </button>
                                            </form>
                                        }

                                        @if (order.OrderStatus == SD.StatusShipped)
                                        {
                                            <form asp-action="MarkAsDelivered" method="post" class="inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@order.Id" />
                                                <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                                <button type="submit"
                                                        class="inline-flex items-center px-3 sm:px-4 py-1 sm:py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-purple-500 focus:ring-offset-1 sm:focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md text-xs sm:text-sm">
                                                    <i class="fas fa-check-circle mr-1 sm:mr-2"></i> Mark as Delivered
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="px-3 sm:px-5 py-3 sm:py-4 flex items-center justify-between border-t border-gray-200 bg-gray-50 rounded-b-none sm:rounded-b-xl">
                <div class="flex-1 flex justify-between sm:hidden">
                    <button id="prevPageMobile" class="relative inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                        Previous
                    </button>
                    <button id="nextPageMobile" class="ml-3 relative inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                        Next
                    </button>
                </div>
                <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                    <div>
                        <p class="text-xs sm:text-sm text-gray-700" id="paginationInfo">
                            Showing <span class="font-medium">1</span> to <span class="font-medium">10</span> of <span class="font-medium">@Model.Count()</span> results
                        </p>
                    </div>
                    <div>
                        <nav class="relative z-0 inline-flex rounded-lg shadow-sm -space-x-px" aria-label="Pagination">
                            <button id="firstPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 rounded-l-lg border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">First</span>
                                <i class="fas fa-angle-double-left text-xs"></i>
                            </button>
                            <button id="prevPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Previous</span>
                                <i class="fas fa-angle-left text-xs"></i>
                            </button>
                            <div id="pageNumbers" class="flex">
                                <!-- Page numbers will be inserted here by JavaScript -->
                            </div>
                            <button id="nextPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Next</span>
                                <i class="fas fa-angle-right text-xs"></i>
                            </button>
                            <button id="lastPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 rounded-r-lg border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Last</span>
                                <i class="fas fa-angle-double-right text-xs"></i>
                            </button>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- JavaScript for table functionality -->
<script>
    // DOM Elements
    const tableBody = document.getElementById('tableBody');
    const searchInput = document.getElementById('searchInput');
    const rowsPerPage = document.getElementById('rowsPerPage');
    const paginationInfo = document.getElementById('paginationInfo');
    const pageNumbers = document.getElementById('pageNumbers');
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    const firstPage = document.getElementById('firstPage');
    const lastPage = document.getElementById('lastPage');
    const prevPageMobile = document.getElementById('prevPageMobile');
    const nextPageMobile = document.getElementById('nextPageMobile');
    const filterAll = document.getElementById('filterAll');
    const filterPending = document.getElementById('filterPending');
    const filterApproved = document.getElementById('filterApproved');
    const filterInProgress = document.getElementById('filterInProgress');

    // State
    let currentPage = 1;
    let rowsPerPageValue = 10;
    let allOrders = Array.from(tableBody.querySelectorAll('tr'));
    let filteredOrders = [...allOrders];
    let sortColumn = null;
    let sortDirection = 1; // 1 for ascending, -1 for descending

    // Initialize
    function init() {
        updateTable();
        setupEventListeners();
    }

    // Event Listeners
    function setupEventListeners() {
        searchInput.addEventListener('input', handleSearch);
        rowsPerPage.addEventListener('change', handleRowsPerPageChange);
        prevPage.addEventListener('click', () => changePage(-1));
        nextPage.addEventListener('click', () => changePage(1));
        firstPage.addEventListener('click', () => goToPage(1));
        lastPage.addEventListener('click', () => goToPage(Math.ceil(filteredOrders.length / rowsPerPageValue)));
        prevPageMobile.addEventListener('click', () => changePage(-1));
        nextPageMobile.addEventListener('click', () => changePage(1));
        filterAll.addEventListener('click', () => filterOrders('All'));
        filterPending.addEventListener('click', () => filterOrders('Pending'));
        filterApproved.addEventListener('click', () => filterOrders('Approved'));
        filterInProgress.addEventListener('click', () => filterOrders('InProgress'));
    }

    // Search Functionality
    function handleSearch() {
        const searchTerm = searchInput.value.toLowerCase();
        filteredOrders = allOrders.filter(row => {
            const orderId = row.querySelector('.sm\\:table-cell:first-child')?.textContent?.toLowerCase() ||
                            row.querySelector('div.font-medium')?.textContent?.replace('Order #', '')?.toLowerCase() || '';
            const customerName = row.querySelector('.sm\\:table-cell:nth-child(2)')?.textContent?.toLowerCase() ||
                               row.querySelector('div.text-sm.text-gray-500:first-of-type')?.textContent?.toLowerCase() || '';

            return orderId.includes(searchTerm) || customerName.includes(searchTerm);
        });
        currentPage = 1;
        updateTable();
    }

    // Filter Functionality
    function filterOrders(status) {
        // Reset all button styles
        [filterAll, filterPending, filterApproved, filterInProgress].forEach(btn => {
            btn.classList.remove('text-white', 'bg-primary');
        });

        const activeButton = {
            'All': filterAll,
            'Pending': filterPending,
            'Approved': filterApproved,
            'InProgress': filterInProgress
        }[status];

        // Reset ALL buttons to their original colors first
        filterAll.classList.remove('text-white', 'bg-primary');
        filterAll.classList.add('bg-primary', 'text-white'); // Special case for "All" button

        filterPending.classList.remove('text-white', 'bg-primary');
        filterPending.classList.add('bg-yellow-100', 'text-yellow-800');

        filterApproved.classList.remove('text-white', 'bg-primary');
        filterApproved.classList.add('bg-green-100', 'text-green-800');

        filterInProgress.classList.remove('text-white', 'bg-primary');
        filterInProgress.classList.add('bg-blue-100', 'text-blue-800');

        // Now apply active state to the selected button
        if (activeButton) {
            activeButton.classList.remove(
                'bg-yellow-100', 'text-yellow-800',
                'bg-green-100', 'text-green-800',
                'bg-blue-100', 'text-blue-800'
            );
            activeButton.classList.add('text-white', 'bg-primary');
        }

        if (status === 'All') {
            filteredOrders = [...allOrders];
        } else {
            filteredOrders = allOrders.filter(row => {
                const statusElement = row.querySelector('.sm\\:table-cell:nth-child(4) span') ||
                                    row.querySelector('span.px-2');
                const rowStatus = statusElement?.textContent?.trim();

                if (status === 'InProgress') {
                    return rowStatus === 'In Progress';
                }
                return rowStatus === status;
            });
        }

        currentPage = 1;
        updateTable();
    }

    // Pagination
    function handleRowsPerPageChange() {
        rowsPerPageValue = parseInt(rowsPerPage.value);
        currentPage = 1;
        updateTable();
    }

    function changePage(delta) {
        const newPage = currentPage + delta;
        const totalPages = Math.ceil(filteredOrders.length / rowsPerPageValue);

        if (newPage > 0 && newPage <= totalPages) {
            currentPage = newPage;
            updateTable();
        }
    }

    function goToPage(page) {
        const totalPages = Math.ceil(filteredOrders.length / rowsPerPageValue);

        if (page > 0 && page <= totalPages) {
            currentPage = page;
            updateTable();
        }
    }

    // Update Table Display
    function updateTable() {
        const startIndex = (currentPage - 1) * rowsPerPageValue;
        const endIndex = startIndex + rowsPerPageValue;
        const paginatedOrders = filteredOrders.slice(startIndex, endIndex);

        // Clear table
        tableBody.innerHTML = '';

        // Add filtered/sorted rows
        paginatedOrders.forEach(row => tableBody.appendChild(row.cloneNode(true)));

        // Update pagination info
        updatePaginationInfo();

        // Update pagination controls
        updatePaginationControls();
    }

    function updatePaginationInfo() {
        const startItem = (currentPage - 1) * rowsPerPageValue + 1;
        const endItem = Math.min(currentPage * rowsPerPageValue, filteredOrders.length);

        paginationInfo.innerHTML = `
            Showing <span class="font-medium">${startItem}</span> to <span class="font-medium">${endItem}</span> of
            <span class="font-medium">${filteredOrders.length}</span> results
        `;
    }

    function updatePaginationControls() {
        const totalPages = Math.ceil(filteredOrders.length / rowsPerPageValue);

        // Clear existing page numbers
        pageNumbers.innerHTML = '';

        // Determine which pages to show (max 5 pages at a time)
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);

        if (currentPage <= 3) {
            endPage = Math.min(5, totalPages);
        }
        if (currentPage >= totalPages - 2) {
            startPage = Math.max(1, totalPages - 4);
        }

        // Add page number buttons
        for (let i = startPage; i <= endPage; i++) {
            const pageBtn = document.createElement('button');
            pageBtn.className = `relative inline-flex items-center px-3 sm:px-4 py-1.5 sm:py-2 border text-xs sm:text-sm font-medium transition-colors duration-200 ${
                i === currentPage
                    ? 'z-10 bg-primary border-primary text-white'
                    : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
            }`;
            pageBtn.textContent = i;
            pageBtn.addEventListener('click', () => goToPage(i));
            pageNumbers.appendChild(pageBtn);
        }

        // Enable/disable navigation buttons
        prevPage.disabled = currentPage === 1;
        nextPage.disabled = currentPage === totalPages;
        firstPage.disabled = currentPage === 1;
        lastPage.disabled = currentPage === totalPages;
        prevPageMobile.disabled = currentPage === 1;
        nextPageMobile.disabled = currentPage === totalPages;
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', init);
</script>