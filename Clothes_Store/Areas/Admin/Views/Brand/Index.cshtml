@model IEnumerable<Clothes_Models.Models.Brand>

<div class="max-w-7xl mx-auto px-0 sm:px-4 sm:px-6 lg:px-8 py-2 sm:py-8 min-h-[150vh]">
    <!-- Header Section -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 sm:mb-8 gap-3 sm:gap-4 px-3 sm:px-0">
        <div>
            <h1 class="text-xl sm:text-2xl font-bold text-gray-900">Brand Dashboard</h1>
            <p class="mt-1 text-xs sm:text-sm text-gray-500">Manage your clothing brands collection</p>
        </div>
        <div class="flex flex-col sm:flex-row gap-2 sm:gap-3 w-full sm:w-auto">
            <!-- Search Input -->
            <div class="relative flex-grow sm:flex-grow-0 sm:w-56 md:w-64 lg:w-72">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400 text-xs sm:text-sm"></i>
                </div>
                <input type="text" id="searchInput" placeholder="Search brands..."
                       class="pl-9 sm:pl-10 pr-3 py-1.5 sm:py-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary shadow-sm text-xs sm:text-sm transition-all duration-200">
            </div>

            <!-- Add Brand Button -->
            <a asp-action="Upsert" class="flex items-center justify-center px-3 sm:px-4 py-1.5 sm:py-2 bg-primary hover:bg-primary-dark rounded-lg shadow-sm sm:shadow-md text-xs sm:text-sm font-medium text-white focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-offset-1 sm:focus:ring-offset-2 focus:ring-primary transition-all duration-200 group whitespace-nowrap">
                <i class="fas fa-plus mr-1 sm:mr-2 transition-transform duration-200 group-hover:rotate-90 text-xs sm:text-sm"></i>
                <span>Add Brand</span>
            </a>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-3 gap-3 sm:gap-5 mb-4 sm:mb-8 px-3 sm:px-0">
        <div class="bg-white p-3 sm:p-5 rounded-lg sm:rounded-xl shadow-sm border-l-4 border-primary hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs sm:text-sm font-medium text-gray-500">Total Brands</p>
                    <p class="text-lg sm:text-2xl font-semibold text-gray-900" id="totalBrands">@Model.Count()</p>
                </div>
                <div class="p-2 sm:p-3 rounded-full bg-primary bg-opacity-10 text-primary">
                    <i class="fas fa-tags text-sm sm:text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white p-3 sm:p-5 rounded-lg sm:rounded-xl shadow-sm border-l-4 border-blue-500 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs sm:text-sm font-medium text-gray-500">Active Brands</p>
                    <p class="text-lg sm:text-2xl font-semibold text-gray-900" id="activeBrands">@Model.Count()</p>
                </div>
                <div class="p-2 sm:p-3 rounded-full bg-blue-500 bg-opacity-10 text-blue-500">
                    <i class="fas fa-check-circle text-sm sm:text-xl"></i>
                </div>
            </div>
        </div>
        <div class="bg-white p-3 sm:p-5 rounded-lg sm:rounded-xl shadow-sm border-l-4 border-green-500 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-xs sm:text-sm font-medium text-gray-500">Featured</p>
                    <p class="text-lg sm:text-2xl font-semibold text-gray-900">0</p>
                </div>
                <div class="p-2 sm:p-3 rounded-full bg-green-500 bg-opacity-10 text-green-500">
                    <i class="fas fa-star text-sm sm:text-xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    @if (Model.Count() == 0)
    {
        <div class="bg-white shadow-lg rounded-lg sm:rounded-xl p-6 sm:p-8 text-center mx-3 sm:mx-0">
            <div class="mx-auto h-16 sm:h-24 w-16 sm:w-24 text-gray-300 mb-3 sm:mb-4">
                <i class="fas fa-tshirt text-4xl sm:text-6xl opacity-50"></i>
            </div>
            <h3 class="text-base sm:text-lg font-medium text-gray-900">No brands found</h3>
            <p class="mt-1 text-xs sm:text-sm text-gray-500">Get started by adding your first clothing brand</p>
            <div class="mt-4 sm:mt-6">
                <a asp-action="Upsert" class="inline-flex items-center px-3 sm:px-4 py-1.5 sm:py-2 bg-primary text-white rounded-lg shadow-sm sm:shadow-md transform transition-all hover:bg-primary-dark hover:scale-105 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-primary focus:ring-opacity-30 duration-200 text-xs sm:text-sm">
                    <i class="fas fa-plus mr-1 sm:mr-2 text-xs sm:text-sm"></i> Add Brand
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="bg-white shadow-none sm:shadow rounded-none sm:rounded-xl overflow-hidden mx-0 sm:mx-0">
            <!-- Table Header -->
            <div class="px-3 sm:px-5 py-3 sm:py-4 border-b border-gray-200 bg-gray-50 rounded-t-none sm:rounded-t-xl">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-4">
                    <h3 class="text-base sm:text-lg font-medium text-gray-900">Brand List</h3>
                    <div class="flex items-center space-x-2 sm:space-x-3">
                        <div class="relative">
                            <select id="rowsPerPage" class="appearance-none bg-white border border-gray-300 rounded-lg pl-2 sm:pl-3 pr-6 sm:pr-8 py-1 sm:py-2 text-xs sm:text-sm focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary shadow-sm">
                                <option value="5">5 per page</option>
                                <option value="10" selected>10 per page</option>
                                <option value="25">25 per page</option>
                                <option value="50">50 per page</option>
                            </select>
                            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-1 sm:px-2 text-gray-700">
                                <i class="fas fa-chevron-down text-xs"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50 hidden sm:table-header-group">
                        <tr>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors duration-150" onclick="sortTable(0)">
                                <div class="flex items-center">
                                    <span>ID</span>
                                    <i class="fas fa-sort ml-1 sm:ml-2 text-gray-400 text-xs"></i>
                                </div>
                            </th>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 transition-colors duration-150" onclick="sortTable(1)">
                                <div class="flex items-center">
                                    <span>Brand Name</span>
                                    <i class="fas fa-sort ml-1 sm:ml-2 text-gray-400 text-xs"></i>
                                </div>
                            </th>
                            <th scope="col" class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200" id="tableBody">
                        @{
                            var i = 1;
                        }
                        @foreach (var brand in Model)
                        {
                            <tr class="hover:bg-gray-50 transition-colors duration-150 block sm:table-row mb-3 sm:mb-0 border-b sm:border-b-0 border-gray-200">
                                <!-- Mobile View -->
                                <td class="block sm:hidden px-3 py-3">
                                    <div class="flex justify-between items-start">
                                        <div class="font-medium text-gray-900 text-sm">Brand #@i</div>
                                    </div>
                                    <div class="mt-1 text-sm text-gray-900">@brand.Brand_Name</div>

                                    <!-- Mobile Actions -->
                                    <div class="mt-2 flex flex-wrap gap-1">
                                        <a asp-action="Upsert" asp-route-Id="@brand.Brand_Id"
                                           class="inline-flex items-center px-3 py-1 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-xs">
                                            <i class="fas fa-edit mr-1"></i> Edit
                                        </a>
                                        <button onclick="confirmDelete('@brand.Brand_Id', '@brand.Brand_Name')"
                                                class="inline-flex items-center px-3 py-1 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-1 focus:ring-red-500 text-xs">
                                            <i class="fas fa-trash-alt mr-1"></i> Delete
                                        </button>
                                    </div>
                                </td>

                                <!-- Desktop View -->
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-medium text-gray-900">@i</td>
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm text-gray-900 brand-name">@brand.Brand_Name</td>
                                <td class="hidden sm:table-cell px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm text-gray-500">
                                    <div class="flex flex-wrap gap-1 sm:gap-2">
                                        <a asp-action="Upsert" asp-route-Id="@brand.Brand_Id"
                                           class="inline-flex items-center px-2 sm:px-4 py-1 sm:py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 sm:focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md text-xs sm:text-sm">
                                            <i class="fas fa-edit mr-1 sm:mr-2 text-xs"></i> Edit
                                        </a>
                                        <button onclick="confirmDelete('@brand.Brand_Id', '@brand.Brand_Name')"
                                                class="inline-flex items-center px-2 sm:px-4 py-1 sm:py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-red-500 focus:ring-offset-1 sm:focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md text-xs sm:text-sm">
                                            <i class="fas fa-trash-alt mr-1 sm:mr-2 text-xs"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            i++;
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="px-3 sm:px-5 py-3 sm:py-4 flex items-center justify-between border-t border-gray-200 bg-gray-50 rounded-b-none sm:rounded-b-xl">
                <div class="flex-1 flex justify-between sm:hidden">
                    <button id="prevPageMobile" class="relative inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                        Previous
                    </button>
                    <button id="nextPageMobile" class="ml-3 relative inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                        Next
                    </button>
                </div>
                <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                    <div>
                        <p class="text-xs sm:text-sm text-gray-700" id="paginationInfo">
                            Showing <span class="font-medium">1</span> to <span class="font-medium">10</span> of <span class="font-medium">@Model.Count()</span> results
                        </p>
                    </div>
                    <div>
                        <nav class="relative z-0 inline-flex rounded-lg shadow-sm -space-x-px" aria-label="Pagination">
                            <button id="firstPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 rounded-l-lg border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">First</span>
                                <i class="fas fa-angle-double-left text-xs"></i>
                            </button>
                            <button id="prevPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Previous</span>
                                <i class="fas fa-angle-left text-xs"></i>
                            </button>
                            <div id="pageNumbers" class="flex">
                                <!-- Page numbers will be inserted here by JavaScript -->
                            </div>
                            <button id="nextPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Next</span>
                                <i class="fas fa-angle-right text-xs"></i>
                            </button>
                            <button id="lastPage" class="relative inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 rounded-r-lg border border-gray-300 bg-white text-xs sm:text-sm font-medium text-gray-500 hover:bg-gray-50 transition-colors duration-200">
                                <span class="sr-only">Last</span>
                                <i class="fas fa-angle-double-right text-xs"></i>
                            </button>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Delete Confirmation Modal Script -->
<script>
    function confirmDelete(id, name) {
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-200 opacity-0';
        modal.innerHTML = `
            <div class="bg-white rounded-lg sm:rounded-xl shadow-lg sm:shadow-2xl max-w-xs sm:max-w-md w-full p-4 sm:p-6 transform transition-all duration-200 scale-95">
                <div class="flex items-center mb-3 sm:mb-4">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-10 sm:h-12 w-10 sm:w-12 rounded-full bg-red-100">
                        <i class="fas fa-exclamation-triangle text-red-600 text-lg sm:text-xl"></i>
                    </div>
                </div>
                <div class="text-center">
                    <h3 class="text-base sm:text-lg leading-6 font-medium text-gray-900">Delete Brand</h3>
                    <div class="mt-1 sm:mt-2">
                        <p class="text-xs sm:text-sm text-gray-500">
                            Are you sure you want to delete <span class="font-semibold">${name}</span>? This action cannot be undone.
                        </p>
                    </div>
                </div>
                <div class="mt-4 sm:mt-5 sm:grid sm:grid-cols-2 sm:gap-2 sm:grid-flow-row-dense">
                    <button type="button" id="confirmDelete" class="w-full inline-flex justify-center rounded-lg border border-transparent shadow-sm px-3 sm:px-4 py-1.5 sm:py-2 bg-red-600 text-xs sm:text-sm font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-offset-1 sm:focus:ring-offset-2 focus:ring-red-500 sm:col-start-2 transition-colors duration-200">
                        Delete
                    </button>
                    <button type="button" id="cancelDelete" class="mt-2 sm:mt-0 w-full inline-flex justify-center rounded-lg border border-gray-300 shadow-sm px-3 sm:px-4 py-1.5 sm:py-2 bg-white text-xs sm:text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-1 sm:focus:ring-2 focus:ring-offset-1 sm:focus:ring-offset-2 focus:ring-primary sm:col-start-1 transition-colors duration-200">
                        Cancel
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        setTimeout(() => {
            modal.classList.remove('opacity-0');
            modal.querySelector('div').classList.remove('scale-95');
        }, 10);

        modal.querySelector('#confirmDelete').addEventListener('click', () => {
            modal.classList.add('opacity-0');
            modal.querySelector('div').classList.add('scale-95');
            setTimeout(() => {
                window.location.href = `/Admin/Brand/Delete/${id}`;
                document.body.removeChild(modal);
            }, 200);
        });

        modal.querySelector('#cancelDelete').addEventListener('click', () => {
            modal.classList.add('opacity-0');
            modal.querySelector('div').classList.add('scale-95');
            setTimeout(() => {
                document.body.removeChild(modal);
            }, 200);
        });
    }
</script>

<!-- Main Table Functionality Script -->
<script>
    const tableBody = document.getElementById('tableBody');
    const searchInput = document.getElementById('searchInput');
    const rowsPerPage = document.getElementById('rowsPerPage');
    const paginationInfo = document.getElementById('paginationInfo');
    const pageNumbers = document.getElementById('pageNumbers');
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    const firstPage = document.getElementById('firstPage');
    const lastPage = document.getElementById('lastPage');
    const prevPageMobile = document.getElementById('prevPageMobile');
    const nextPageMobile = document.getElementById('nextPageMobile');

    let currentPage = 1;
    let rowsPerPageValue = 10;
    let allBrands = Array.from(tableBody.querySelectorAll('tr'));
    let filteredBrands = [...allBrands];
    let sortColumn = null;
    let sortDirection = 1;

    function init() {
        updateTable();
        setupEventListeners();
    }

    function setupEventListeners() {
        searchInput.addEventListener('input', handleSearch);
        rowsPerPage.addEventListener('change', handleRowsPerPageChange);
        prevPage.addEventListener('click', () => changePage(-1));
        nextPage.addEventListener('click', () => changePage(1));
        firstPage.addEventListener('click', () => goToPage(1));
        lastPage.addEventListener('click', () => goToPage(Math.ceil(filteredBrands.length / rowsPerPageValue)));
        prevPageMobile.addEventListener('click', () => changePage(-1));
        nextPageMobile.addEventListener('click', () => changePage(1));
    }

    function handleSearch() {
        const searchTerm = searchInput.value.toLowerCase();
        filteredBrands = allBrands.filter(row => {
            const brandName = row.querySelector('.brand-name')?.textContent?.toLowerCase() || '';
            return brandName.includes(searchTerm);
        });
        currentPage = 1;
        updateTable();
    }

    function handleRowsPerPageChange() {
        rowsPerPageValue = parseInt(rowsPerPage.value);
        currentPage = 1;
        updateTable();
    }

    function changePage(delta) {
        const newPage = currentPage + delta;
        const totalPages = Math.ceil(filteredBrands.length / rowsPerPageValue);

        if (newPage > 0 && newPage <= totalPages) {
            currentPage = newPage;
            updateTable();
        }
    }

    function goToPage(page) {
        const totalPages = Math.ceil(filteredBrands.length / rowsPerPageValue);

        if (page > 0 && page <= totalPages) {
            currentPage = page;
            updateTable();
        }
    }

    function sortTable(columnIndex) {
        if (sortColumn === columnIndex) {
            sortDirection *= -1;
        } else {
            sortColumn = columnIndex;
            sortDirection = 1;
        }

        filteredBrands.sort((a, b) => {
            const aValue = a.cells[columnIndex].textContent;
            const bValue = b.cells[columnIndex].textContent;

            if (columnIndex === 0) {
                return (parseInt(aValue) - parseInt(bValue)) * sortDirection;
            }

            return aValue.localeCompare(bValue) * sortDirection;
        });

        currentPage = 1;
        updateTable();
    }

    function updateTable() {
        const startIndex = (currentPage - 1) * rowsPerPageValue;
        const endIndex = startIndex + rowsPerPageValue;
        const paginatedBrands = filteredBrands.slice(startIndex, endIndex);

        tableBody.innerHTML = '';
        paginatedBrands.forEach(row => tableBody.appendChild(row.cloneNode(true)));

        updatePaginationInfo();
        updatePaginationControls();
    }

    function updatePaginationInfo() {
        const startItem = (currentPage - 1) * rowsPerPageValue + 1;
        const endItem = Math.min(currentPage * rowsPerPageValue, filteredBrands.length);

        paginationInfo.innerHTML = `
            Showing <span class="font-medium">${startItem}</span> to <span class="font-medium">${endItem}</span> of
            <span class="font-medium">${filteredBrands.length}</span> results
        `;
    }

    function updatePaginationControls() {
        const totalPages = Math.ceil(filteredBrands.length / rowsPerPageValue);

        pageNumbers.innerHTML = '';

        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);

        if (currentPage <= 3) {
            endPage = Math.min(5, totalPages);
        }
        if (currentPage >= totalPages - 2) {
            startPage = Math.max(1, totalPages - 4);
        }

        for (let i = startPage; i <= endPage; i++) {
            const pageBtn = document.createElement('button');
            pageBtn.className = `relative inline-flex items-center px-2 sm:px-4 py-1 sm:py-2 border text-xs sm:text-sm font-medium transition-colors duration-200 ${
                i === currentPage
                    ? 'z-10 bg-primary border-primary text-white'
                    : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
            }`;
            pageBtn.textContent = i;
            pageBtn.addEventListener('click', () => goToPage(i));
            pageNumbers.appendChild(pageBtn);
        }

        prevPage.disabled = currentPage === 1;
        nextPage.disabled = currentPage === totalPages;
        firstPage.disabled = currentPage === 1;
        lastPage.disabled = currentPage === totalPages;
        prevPageMobile.disabled = currentPage === 1;
        nextPageMobile.disabled = currentPage === totalPages;
    }

    document.addEventListener('DOMContentLoaded', init);
</script>