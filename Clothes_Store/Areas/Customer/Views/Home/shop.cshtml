@model IEnumerable<dynamic>

@{
    var showSuccessMessage = TempData["AddToCartSuccess"] != null && (bool)TempData["AddToCartSuccess"];
    var showErrorMessage = TempData["AddToCartError"] != null && (bool)TempData["AddToCartError"];
    var errorMessage = TempData["ErrorMessage"]?.ToString() ?? "An error occurred while adding to cart";
}

<style>
    /* Existing notification styles remain the same */
    .notification-container {
        position: fixed;
        top: 1.5rem;
        right: 1.5rem;
        z-index: 1000;
    }

    .notification {
        padding: 1rem 1.5rem;
        color: white;
        border-radius: 0.75rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
        transform: translateX(150%);
        transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        margin-bottom: 1rem;
        position: relative;
        overflow: hidden;
    }

        .notification.success {
            background-color: #088178;
        }

        .notification.error {
            background-color: #ef4444;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.hide {
            transform: translateX(150%);
            opacity: 0;
        }

    .notification-icon {
        margin-right: 0.75rem;
        font-size: 1.25rem;
    }

    .notification-close {
        margin-left: 1rem;
        cursor: pointer;
        opacity: 0.7;
        transition: opacity 0.2s;
    }

        .notification-close:hover {
            opacity: 1;
        }

    .notification-progress {
        position: absolute;
        bottom: 0;
        left: 0;
        height: 4px;
        width: 100%;
        background: rgba(255, 255, 255, 0.3);
    }

    .notification-progress-bar {
        height: 100%;
        width: 100%;
        background: white;
        animation: progress 3s linear forwards;
        transform-origin: left;
    }

    @@keyframes progress {
        0% {
            transform: scaleX(0);
        }

        100% {
            transform: scaleX(1);
        }
    }

    /* Bounce animation for cart button */
    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }

        40% {
            transform: translateY(-10px);
        }

        60% {
            transform: translateY(-5px);
        }
    }

    .bounce-effect {
        animation: bounce 1s;
    }

    /* Size selection modal styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

    .size-modal {
        background-color: white;
        border-radius: 0.5rem;
        width: 90%;
        max-width: 400px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .modal-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #333;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #666;
    }

    .size-options {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 0.75rem;
        margin-bottom: 1.5rem;
    }

    .size-option {
        border: 1px solid #cce7d0;
        background-color: #e8f6ea;
        color: #088178;
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
    }

        .size-option:hover {
            background-color: #088178;
            color: white;
            border-color: #088178;
        }

        .size-option.active {
            background-color: #088178;
            color: white;
            border-color: #088178;
        }

        .size-option.disabled {
            opacity: 0.5;
            cursor: not-allowed;
            text-decoration: line-through;
            position: relative;
        }

            .size-option.disabled::after {
                content: "×";
                position: absolute;
                top: -5px;
                right: -5px;
                background: #ef4444;
                color: white;
                border-radius: 50%;
                width: 18px;
                height: 18px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 12px;
            }

    ./modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
    }

    .modal-button {
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .cancel-button {
        background-color: #f5f5f5;
        border: 1px solid #ddd;
        color: #333;
    }

    .confirm-button {
        background-color: #088178;
        border: 1px solid #088178;
        color: white;
    }

        .confirm-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    /* Existing product styles */
    .pro-cart-button {
        width: 40px;
        height: 40px;
        line-height: 40px;
        border-radius: 50px;
        background-color: #e8f6ea;
        font-weight: 500;
        color: #088178;
        border: 1px solid #cce7d0;
        position: absolute;
        bottom: 20px;
        right: 10px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        padding: 0;
        text-decoration: none;
        transition: all 0.3s ease;
    }

        .pro-cart-button:hover {
            background-color: #cce7d0;
            color: #066156;
            transform: scale(1.05);
        }

    /* Pagination styles */
    #pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 8px;
        margin: 30px 0;
        flex-wrap: wrap;
    }

        #pagination a {
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 40px;
            height: 40px;
            padding: 0 12px;
            border-radius: 8px;
            text-decoration: none;
            color: #088178;
            font-weight: 500;
            transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            background-color: rgba(232, 246, 234, 0.3);
            border: 1px solid rgba(8, 129, 120, 0.1);
        }

            #pagination a:hover:not(.active):not(.disabled) {
                background-color: rgba(232, 246, 234, 0.7);
                transform: translateY(-2px);
                box-shadow: 0 2px 8px rgba(8, 129, 120, 0.15);
            }

            #pagination a.active {
                background-color: #088178;
                color: white;
                font-weight: 600;
                box-shadow: 0 4px 12px rgba(8, 129, 120, 0.25);
                border: none;
            }

            #pagination a.disabled {
                color: #c1c1c1;
                background-color: #f9f9f9;
                cursor: not-allowed;
                border-color: #eee;
            }

        #pagination i {
            font-size: 1rem;
            transition: transform 0.3s ease;
        }

        #pagination a:hover:not(.disabled) i {
            transform: scale(1.2);
        }

    /* Loading spinner - Enhanced */
    .loading-spinner {
        display: none;
        text-align: center;
        padding: 30px 0;
        margin: 20px 0;
    }

        .loading-spinner.active {
            display: block;
        }

    .spinner {
        position: relative;
        width: 40px;
        height: 40px;
        margin: 0 auto;
    }

        .spinner:before,
        .spinner:after {
            content: "";
            position: absolute;
            border-radius: 50%;
        }

        .spinner:before {
            width: 100%;
            height: 100%;
            border: 4px solid rgba(232, 246, 234, 0.8);
        }

        .spinner:after {
            width: 100%;
            height: 100%;
            border: 4px solid transparent;
            border-top-color: #088178;
            border-bottom-color: #088178;
            animation: spin 1s linear infinite;
        }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        #pagination

    {
        gap: 6px;
    }

    #pagination a {
        min-width: 36px;
        height: 36px;
        padding: 0 8px;
        font-size: 0.9rem;
    }

    .spinner {
        width: 32px;
        height: 32px;
    }

    }
</style>

<!-- Notification Container -->
<div class="notification-container">
    @if (showSuccessMessage)
    {
        <div id="successNotification" class="notification success">
            <i class="fas fa-check-circle notification-icon"></i>
            <span>Item added to cart successfully!</span>
            <span class="notification-close" onclick="hideNotification('successNotification')">
                <i class="fas fa-times"></i>
            </span>
            <div class="notification-progress">
                <div class="notification-progress-bar"></div>
            </div>
        </div>
    }

    @if (showErrorMessage)
    {
        <div id="errorNotification" class="notification error">
            <i class="fas fa-exclamation-circle notification-icon"></i>
            <span>@errorMessage</span>
            <span class="notification-close" onclick="hideNotification('errorNotification')">
                <i class="fas fa-times"></i>
            </span>
            <div class="notification-progress">
                <div class="notification-progress-bar"></div>
            </div>
        </div>
    }
</div>

<!-- Size Selection Modal -->
<div class="modal-overlay" id="sizeModal">
    <div class="size-modal">
        <div class="modal-header">
            <h3 class="modal-title">Select Size</h3>
            <button class="close-modal" onclick="hideSizeModal()">×</button>
        </div>
        <div class="size-options" id="sizeOptionsContainer">
            <!-- Size options will be populated dynamically -->
        </div>
        <div class="modal-actions">
            <button class="modal-button cancel-button" onclick="hideSizeModal()">Cancel</button>
            <button class="modal-button confirm-button" id="confirmAddToCart" disabled>Add to Cart</button>
        </div>
    </div>
</div>

<section id="page-header" style="background-image: url('@Url.Content("~/img/banner/b1.jpg")');">
    <h2>#stayhome</h2>
    <p>Save More coupons & up to 70% off!</p>
</section>

<section id="product1" class="section-p1">
    <h2>Featured Products</h2>
    <p>Summer Collection New Modern Design</p>

    <!-- Product List Container -->
    <div id="productContainer" class="pro-container">
        @foreach (var product in Model)
        {
            <div class="pro" onclick="window.location.href='@Url.Action("Details", "Home", new { area = "Customer", id = product.Product_Id })';">
                <img src="@product.imgUrl" alt="@product.Product_Name" class="product-img">
                <div class="des">
                    <span class="product-brand">@product.BrandName</span>
                    <h5 class="product-description">@product.Product_Name</h5>
                    <div class="star">
                        @for (int i = 0; i < product.Product_Rating; i++)
                        {
                            <i class="fas fa-star"></i>
                        }
                        @for (int i = product.Product_Rating; i < 5; i++)
                        {
                            <i class="far fa-star"></i>
                        }
                    </div>
                    <h4 class="product-price">$@product.Product_Price</h4>
                </div>
                <div class="pro-cart-button" onclick="event.stopPropagation(); showSizeModal(@product.Product_Id)">
                    <i class="fal fa-shopping-cart"></i>
                </div>
                <form class="add-to-cart-form" data-product-id="@product.Product_Id" style="display: none;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="productId" value="@product.Product_Id" />
                    <input type="hidden" name="quantity" value="1" />
                    <input type="hidden" name="size" id="size-@product.Product_Id" value="" />
                </form>
            </div>
        }
    </div>

    <!-- Loading Spinner -->
    <div class="loading-spinner" id="loadingSpinner">
        <div class="spinner"></div>
    </div>
</section>

<section id="pagination" class="section-p1">
    <!-- Pagination will be populated dynamically -->
</section>

<section id="newsletter" class="section-p1 section-m1">
    <div class="newstext">
        <h4>Sign Up For Newsletter</h4>
        <p>Get E-mail updates about our latest shop and <span>special offers</span></p>
    </div>
    <div class="form">
        <input type="text" placeholder="Your Email Address">
        <button class="normal">Sign Up</button>
    </div>
</section>

<script>
    // Global variables for size selection
    let currentProductId = null;
    let selectedSize = null;

    // Show size selection modal with available sizes
    function showSizeModal(productId) {
        currentProductId = productId;
        selectedSize = null;
        document.getElementById('confirmAddToCart').disabled = true;

        const sizeOptionsContainer = document.getElementById('sizeOptionsContainer');
        sizeOptionsContainer.innerHTML = '<p>Loading sizes...</p>';

        document.getElementById('sizeModal').classList.add('active');

        fetch(`/Customer/Home/GetProductSizes?productId=${productId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateSizeOptions(data.sizes);
                } else {
                    sizeOptionsContainer.innerHTML = `<p class="text-red-500">${data.message}</p>`;
                }
            })
            .catch(error => {
                sizeOptionsContainer.innerHTML = '<p class="text-red-500">Error loading sizes</p>';
            });
    }

    function updateSizeOptions(availableSizes) {
        const sizeOptionsContainer = document.getElementById('sizeOptionsContainer');
        sizeOptionsContainer.innerHTML = '';

        if (!availableSizes || availableSizes.length === 0) {
            sizeOptionsContainer.innerHTML = '<p class="text-red-500 col-span-3">This product is currently out of stock</p>';
            document.getElementById('confirmAddToCart').disabled = true;
        } else {
            const allSizes = ['S', 'M', 'L', 'XL', 'XXL', 'XXXL'];
            allSizes.forEach(size => {
                const isAvailable = availableSizes.includes(size);
                const sizeOption = document.createElement('div');
                sizeOption.className = `size-option ${isAvailable ? '' : 'disabled'}`;
                sizeOption.textContent = size;
                sizeOption.dataset.size = size;

                if (isAvailable) {
                    sizeOption.addEventListener('click', function () {
                        document.querySelectorAll('.size-option').forEach(opt => opt.classList.remove('active'));
                        this.classList.add('active');
                        selectedSize = this.dataset.size;
                        document.getElementById('confirmAddToCart').disabled = false;
                    });
                }

                sizeOptionsContainer.appendChild(sizeOption);
            });
        }
    }

    function hideSizeModal() {
        document.getElementById('sizeModal').classList.remove('active');
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Confirm add to cart button
        document.getElementById('confirmAddToCart').addEventListener('click', function () {
            if (currentProductId && selectedSize) {
                document.getElementById(`size-${currentProductId}`).value = selectedSize;
                const form = document.querySelector(`.add-to-cart-form[data-product-id="${currentProductId}"]`);
                const formData = new FormData(form);

                hideSizeModal();

                fetch('@Url.Action("AddToCart", "Cart", new { area = "Customer" })', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                        throw new Error('Network response was not ok.');
                    })
                    .then(data => {
                        showNotification(data.success, data.message);
                        if (data.success) {
                            const cartButton = document.querySelector(`.pro-cart-button[onclick*="${currentProductId}"]`);
                            if (cartButton) {
                                cartButton.classList.add('bounce-effect');
                                setTimeout(() => cartButton.classList.remove('bounce-effect'), 1000);
                            }
                            if (data.cartCount !== undefined) {
                                updateCartCount(data.cartCount);
                            }
                        }
                    })
                    .catch(error => {
                        showNotification(false, 'An error occurred while adding to cart');
                    });
            }
        });

        function updateCartCount(count) {
            const cartCountElement = document.querySelector('.cart-count');
            if (cartCountElement) {
                cartCountElement.textContent = count;
                cartCountElement.style.display = count > 0 ? 'inline-block' : 'none';
            }
        }

        function showNotification(isSuccess, message) {
            const notificationContainer = document.querySelector('.notification-container');
            const notificationId = 'notification-' + Date.now();
            const notificationClass = isSuccess ? 'success' : 'error';
            const iconClass = isSuccess ? 'fa-check-circle' : 'fa-exclamation-circle';

            const notificationHTML = `
                <div id="${notificationId}" class="notification ${notificationClass}">
                    <i class="fas ${iconClass} notification-icon"></i>
                    <span>${message}</span>
                    <span class="notification-close" onclick="hideNotification('${notificationId}')">
                        <i class="fas fa-times"></i>
                    </span>
                    <div class="notification-progress">
                        <div class="notification-progress-bar"></div>
                    </div>
                </div>
            `;

            notificationContainer.insertAdjacentHTML('beforeend', notificationHTML);
            const notification = document.getElementById(notificationId);

            setTimeout(() => notification.classList.add('show'), 100);

            const autoHide = setTimeout(() => hideNotification(notificationId), 3000);

            notification.addEventListener('mouseenter', () => {
                clearTimeout(autoHide);
                notification.querySelector('.notification-progress-bar').style.animationPlayState = 'paused';
            });

            notification.addEventListener('mouseleave', () => {
                const progressBar = notification.querySelector('.notification-progress-bar');
                const remainingWidth = 1 - (progressBar.offsetWidth / progressBar.parentElement.offsetWidth);
                const remainingTime = remainingWidth * 3000;

                progressBar.style.animationPlayState = 'running';
                setTimeout(() => hideNotification(notificationId), remainingTime);
            });
        }

        window.hideNotification = function (id) {
            const notification = document.getElementOfId(id);
            if (notification) {
                notification.classList.remove('show');
                notification.classList.add('hide');
                setTimeout(() => notification.remove(), 500);
            }
        };

        // Pagination JavaScript
        const pageSize = @ViewBag.PageSize;
        let currentPage = @ViewBag.CurrentPage;
        let totalPages = @ViewBag.TotalPages;

        function renderProduct(product) {
            const stars = Array(5).fill().map((_, i) =>
                i < product.product_Rating
                    ? '<i class="fas fa-star"></i>'
                    : '<i class="far fa-star"></i>'
            ).join('');

            return `
                <div class="pro" onclick="window.location.href='@Url.Action("Details", "Home", new { area = "Customer" })?id=${product.product_Id}'">
                    <img src="${product.imgUrl}" alt="${product.product_Name}" class="product-img">
                    <div class="des">
                        <span class="product-brand">${product.brandName}</span>
                        <h5 class="product-description">${product.product_Name}</h5>
                        <div class="star">${stars}</div>
                        <h4 class="product-price">$${product.product_Price}</h4>
                    </div>
                    <div class="pro-cart-button" onclick="event.stopPropagation(); showSizeModal(${product.product_Id})">
                        <i class="fal fa-shopping-cart"></i>
                    </div>
                    <form class="add-to-cart-form" data-product-id="${product.product_Id}" style="display: none;">
                        <input type="hidden" name="__RequestVerificationToken" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                        <input type="hidden" name="productId" value="${product.product_Id}" />
                        <input type="hidden" name="quantity" value="1" />
                        <input type="hidden" name="size" id="size-${product.product_Id}" value="" />
                    </form>
                </div>
            `;
        }

        function renderProducts(products) {
            const productContainer = document.getElementById('productContainer');
            productContainer.innerHTML = products.map(renderProduct).join('');
            attachCartButtonListeners();
        }

        function renderPagination() {
            const paginationContainer = document.getElementById('pagination');
            paginationContainer.innerHTML = '';

            const prevLink = document.createElement('a');
            prevLink.innerHTML = '<i class="fal fa-long-arrow-alt-left"></i>';
            prevLink.className = currentPage === 1 ? 'disabled' : '';
            prevLink.addEventListener('click', () => {
                if (currentPage > 1) loadPage(currentPage - 1);
            });
            paginationContainer.appendChild(prevLink);

            for (let i = 1; i <= totalPages; i++) {
                const pageLink = document.createElement('a');
                pageLink.textContent = i;
                pageLink.className = i === currentPage ? 'active' : '';
                pageLink.addEventListener('click', () => loadPage(i));
                paginationContainer.appendChild(pageLink);
            }

            const nextLink = document.createElement('a');
            nextLink.innerHTML = '<i class="fal fa-long-arrow-alt-right"></i>';
            nextLink.className = currentPage === totalPages ? 'disabled' : '';
            nextLink.addEventListener('click', () => {
                if (currentPage < totalPages) loadPage(currentPage + 1);
            });
            paginationContainer.appendChild(nextLink);
        }

        function loadPage(page) {
            const productContainer = document.getElementById('productContainer');
            const loadingSpinner = document.getElementById('loadingSpinner');

            loadingSpinner.classList.add('active');
            productContainer.style.opacity = '0.5';

            fetch(`@Url.Action("Shop", "Home", new { area = "Customer" })?page=${page}&pageSize=${pageSize}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => response.json())
                .then(data => {
                    renderProducts(data.products);
                    currentPage = data.currentPage;
                    totalPages = data.totalPages;
                    renderPagination();
                    loadingSpinner.classList.remove('active');
                    productContainer.style.opacity = '1';
                })
                .catch(error => {
                    console.error('Error loading page:', error);
                    loadingSpinner.classList.remove('active');
                    productContainer.style.opacity = '1';
                    showNotification(false, 'Error loading products');
                });
        }

        function attachCartButtonListeners() {
            document.querySelectorAll('.pro-cart-button').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.stopPropagation();
                    const productId = this.getAttribute('onclick').match(/\d+/)[0];
                    showSizeModal(productId);
                });
            });
        }

        // Initial setup
        renderPagination();
        attachCartButtonListeners();

        // Close modal when clicking outside
        document.getElementById('sizeModal').addEventListener('click', function (e) {
            if (e.target === this) {
                hideSizeModal();
            }
        });
    });
</script>