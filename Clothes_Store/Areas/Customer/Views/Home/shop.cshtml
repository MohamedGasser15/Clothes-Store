@model IEnumerable<Clothes_Models.Models.Product>

@{
    var showSuccessMessage = TempData["AddToCartSuccess"] != null && (bool)TempData["AddToCartSuccess"];
    var showErrorMessage = TempData["AddToCartError"] != null && (bool)TempData["AddToCartError"];
    var errorMessage = TempData["ErrorMessage"]?.ToString() ?? "An error occurred while adding to cart";
}

<style>
    /* Notification styles - same as product details page */
    .notification-container {
        position: fixed;
        top: 1.5rem;
        right: 1.5rem;
        z-index: 1000;
    }

    .notification {
        padding: 1rem 1.5rem;
        color: white;
        border-radius: 0.75rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
        transform: translateX(150%);
        transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        margin-bottom: 1rem;
        position: relative;
        overflow: hidden;
    }

        .notification.success {
            background-color: #088178;
        }

        .notification.error {
            background-color: #ef4444;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.hide {
            transform: translateX(150%);
            opacity: 0;
        }

    .notification-icon {
        margin-right: 0.75rem;
        font-size: 1.25rem;
    }

    .notification-close {
        margin-left: 1rem;
        cursor: pointer;
        opacity: 0.7;
        transition: opacity 0.2s;
    }

        .notification-close:hover {
            opacity: 1;
        }

    .notification-progress {
        position: absolute;
        bottom: 0;
        left: 0;
        height: 4px;
        width: 100%;
        background: rgba(255, 255, 255, 0.3);
    }

    .notification-progress-bar {
        height: 100%;
        width: 100%;
        background: white;
        animation: progress 3s linear forwards;
        transform-origin: left;
    }

    @@keyframes progress {
        0% {
            transform: scaleX(0);
        }

        100% {
            transform: scaleX(1);
        }
    }

    /* Bounce animation for cart button */
    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }

        40% {
            transform: translateY(-10px);
        }

        60% {
            transform: translateY(-5px);
        }
    }

    .bounce-effect {
        animation: bounce 1s;
    }

    /* Existing styles */
    .pro-cart-button {
        width: 40px;
        height: 40px;
        line-height: 40px;
        border-radius: 50px;
        background-color: #e8f6ea;
        font-weight: 500;
        color: #088178;
        border: 1px solid #cce7d0;
        position: absolute;
        bottom: 20px;
        right: 10px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        padding: 0;
        text-decoration: none;
        transition: all 0.3s ease;
    }

        .pro-cart-button:hover {
            background-color: #cce7d0;
            color: #066156;
            transform: scale(1.05);
        }
</style>

<!-- Notification Container -->
<div class="notification-container">
    @if (showSuccessMessage)
    {
        <div id="successNotification" class="notification success">
            <i class="fas fa-check-circle notification-icon"></i>
            <span>Item added to cart successfully!</span>
            <span class="notification-close" onclick="hideNotification('successNotification')">
                <i class="fas fa-times"></i>
            </span>
            <div class="notification-progress">
                <div class="notification-progress-bar"></div>
            </div>
        </div>
    }

    @if (showErrorMessage)
    {
        <div id="errorNotification" class="notification error">
            <i class="fas fa-exclamation-circle notification-icon"></i>
            <span>@errorMessage</span>
            <span class="notification-close" onclick="hideNotification('errorNotification')">
                <i class="fas fa-times"></i>
            </span>
            <div class="notification-progress">
                <div class="notification-progress-bar"></div>
            </div>
        </div>
    }
</div>

<section id="page-header" style="background-image: url('@Url.Content("~/img/banner/b1.jpg")');">
    <h2>#stayhome</h2>
    <p>Save More coupons & up to 70% off!</p>
</section>

<section id="product1" class="section-p1">
    <h2>Featured Products</h2>
    <p>Summer Collection New Modern Design</p>

    <div class="pro-container">
        @foreach (var product in Model)
        {
            <div class="pro" onclick="window.location.href='@Url.Action("Details", "Home", new { id = product.Product_Id })';">

                <!-- Product Image -->
                <img src="@product.imgUrl" alt="@product.Product_Name" class="product-img">

                <div class="des">
                    <!-- Product Brand -->
                    <span class="product-brand">@product.Brand.Brand_Name</span>

                    <!-- Product Name / Description -->
                    <h5 class="product-description">@product.Product_Description</h5>

                    <!-- Product Rating -->
                    <div class="star">
                        @for (int i = 0; i < product.Product_Rating; i++)
                        {
                            <i class="fas fa-star"></i>
                        }
                        @for (int i = product.Product_Rating; i < 5; i++)
                        {
                            <i class="far fa-star"></i>
                        }
                    </div>

                    <!-- Product Price -->
                    <h4 class="product-price">$@product.Product_Price</h4>
                </div>

                <!-- Add to Cart Button -->
                <form class="add-to-cart-form" data-product-id="@product.Product_Id" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="productId" value="@product.Product_Id" />
                    <input type="hidden" name="quantity" value="1" />
                    <button type="submit" class="pro-cart-button" onclick="event.stopPropagation();">
                        <i class="fal fa-shopping-cart"></i>
                    </button>
                </form>
            </div>
        }
    </div>
</section>

<section id="pagination" class="section-p1">
    <a href="#">1</a>
    <a href="#">2</a>
    <a href="#"><i class="fal fa-long-arrow-alt-right"></i></a>
</section>

<section id="newsletter" class="section-p1 section-m1">
    <div class="newstext">
        <h4> Sign Up For Newsletter</h4>
        <p> Get E-mail updates about our latest shop and <span>special offers</span></p>
    </div>
    <div class="form">
        <input type="text" placeholder="Your Email Address">
        <button class="normal"> Sign Up</button>
    </div>
</section>

<script>
    // AJAX form submission
    document.addEventListener('DOMContentLoaded', function() {
        const forms = document.querySelectorAll('.add-to-cart-form');

        forms.forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const productId = this.dataset.productId;
                const button = this.querySelector('button[type="submit"]');

                // Add loading state to button
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                button.disabled = true;

                fetch('@Url.Action("AddToCart", "Cart")', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    }
                    throw new Error('Network response was not ok.');
                })
                .then(data => {
                    showNotification(data.success, data.message);
                    if (data.success) {
                        button.classList.add('bounce-effect');
                    }
                })
                .catch(error => {
                    showNotification(false, 'An error occurred while adding to cart');
                })
                .finally(() => {
                    // Reset button state
                    button.innerHTML = '<i class="fal fa-shopping-cart"></i>';
                    button.disabled = false;
                });
            });
        });

        function showNotification(isSuccess, message) {
            const notificationContainer = document.querySelector('.notification-container');
            const notificationId = 'notification-' + Date.now();
            const notificationClass = isSuccess ? 'success' : 'error';
            const iconClass = isSuccess ? 'fa-check-circle' : 'fa-exclamation-circle';

            const notificationHTML = `
                <div id="${notificationId}" class="notification ${notificationClass}">
                    <i class="fas ${iconClass} notification-icon"></i>
                    <span>${message}</span>
                    <span class="notification-close" onclick="hideNotification('${notificationId}')">
                        <i class="fas fa-times"></i>
                    </span>
                    <div class="notification-progress">
                        <div class="notification-progress-bar"></div>
                    </div>
                </div>
            `;

            notificationContainer.insertAdjacentHTML('beforeend', notificationHTML);
            const notification = document.getElementById(notificationId);

            // Show notification
            setTimeout(() => {
                notification.classList.add('show');
            }, 100);

            // Auto-hide after 3 seconds
            const autoHide = setTimeout(() => {
                hideNotification(notificationId);
            }, 3000);

            // Pause on hover
            notification.addEventListener('mouseenter', () => {
                clearTimeout(autoHide);
                notification.querySelector('.notification-progress-bar').style.animationPlayState = 'paused';
            });

            notification.addEventListener('mouseleave', () => {
                const progressBar = notification.querySelector('.notification-progress-bar');
                const remainingWidth = 1 - (progressBar.offsetWidth / progressBar.parentElement.offsetWidth);
                const remainingTime = remainingWidth * 3000;

                progressBar.style.animationPlayState = 'running';
                setTimeout(() => {
                    hideNotification(notificationId);
                }, remainingTime);
            });
        }

        window.hideNotification = function(id) {
            const notification = document.getElementById(id);
            if (notification) {
                notification.classList.remove('show');
                notification.classList.add('hide');

                setTimeout(() => {
                    notification.remove();
                }, 500);
            }
        };
    });

    // Prevent form submission from triggering the product click
    document.querySelectorAll('.pro-cart-button').forEach(button => {
        button.addEventListener('click', function(e) {
            e.stopPropagation();
        });
    });
</script>